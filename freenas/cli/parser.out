Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> stmt_list
Rule 1     stmt_list -> stmt_redirect
Rule 2     stmt_list -> stmt_redirect NEWLINE
Rule 3     stmt_list -> stmt_redirect NEWLINE stmt_list
Rule 4     stmt_list -> NEWLINE stmt_list
Rule 5     stmt_redirect -> stmt
Rule 6     stmt_redirect -> stmt REDIRECT ATOM
Rule 7     stmt_redirect -> stmt REDIRECT STRING
Rule 8     stmt -> if_stmt
Rule 9     stmt -> for_stmt
Rule 10    stmt -> while_stmt
Rule 11    stmt -> assignment_stmt
Rule 12    stmt -> function_definition_stmt
Rule 13    stmt -> return_stmt
Rule 14    stmt -> break_stmt
Rule 15    stmt -> undef_stmt
Rule 16    stmt -> const_stmt
Rule 17    stmt -> command
Rule 18    stmt -> call
Rule 19    stmt -> expr_parens
Rule 20    stmt -> shell
Rule 21    block -> LBRACE stmt_list RBRACE
Rule 22    block -> LBRACE NEWLINE stmt_list RBRACE
Rule 23    block -> LBRACE NEWLINE RBRACE
Rule 24    block -> LBRACE RBRACE
Rule 25    if_stmt -> IF LPAREN expr RPAREN block
Rule 26    if_stmt -> IF LPAREN expr RPAREN block ELSE block
Rule 27    for_stmt -> FOR LPAREN ATOM IN expr RPAREN block
Rule 28    for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
Rule 29    while_stmt -> WHILE LPAREN expr RPAREN block
Rule 30    assignment_stmt -> ATOM ASSIGN expr
Rule 31    assignment_stmt -> subscript_left ASSIGN expr
Rule 32    const_stmt -> CONST symbol ASSIGN expr
Rule 33    function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block
Rule 34    function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block
Rule 35    function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block
Rule 36    function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
Rule 37    function_argument_list -> ATOM
Rule 38    function_argument_list -> ATOM COMMA function_argument_list
Rule 39    return_stmt -> RETURN
Rule 40    return_stmt -> RETURN expr
Rule 41    break_stmt -> BREAK
Rule 42    undef_stmt -> UNDEF ATOM
Rule 43    expr_list -> expr
Rule 44    expr_list -> expr COMMA expr_list
Rule 45    expr -> symbol
Rule 46    expr -> literal
Rule 47    expr -> array_literal
Rule 48    expr -> dict_literal
Rule 49    expr -> unary_expr
Rule 50    expr -> binary_expr
Rule 51    expr -> call
Rule 52    expr -> subscript_expr
Rule 53    expr -> anon_function_expr
Rule 54    expr -> expr_expansion
Rule 55    expr -> expr_parens
Rule 56    expr -> COPEN expr RBRACE
Rule 57    expr_parens -> LPAREN expr RPAREN
Rule 58    expr_expansion -> EOPEN command RPAREN
Rule 59    array_literal -> LBRACKET RBRACKET
Rule 60    array_literal -> LBRACKET expr_list RBRACKET
Rule 61    dict_literal -> LBRACE RBRACE
Rule 62    dict_literal -> LBRACE NEWLINE RBRACE
Rule 63    dict_literal -> LBRACE dict_pair_list RBRACE
Rule 64    dict_pair_list -> dict_pair
Rule 65    dict_pair_list -> dict_pair COMMA dict_pair_list
Rule 66    dict_pair -> expr COLON expr
Rule 67    dict_pair -> NEWLINE expr COLON expr
Rule 68    dict_pair -> NEWLINE expr COLON expr NEWLINE
Rule 69    literal -> NUMBER
Rule 70    literal -> HEXNUMBER
Rule 71    literal -> BINNUMBER
Rule 72    literal -> OCTNUMBER
Rule 73    literal -> STRING
Rule 74    literal -> TRUE
Rule 75    literal -> FALSE
Rule 76    literal -> NULL
Rule 77    symbol -> ATOM
Rule 78    call -> ATOM LPAREN RPAREN
Rule 79    call -> ATOM LPAREN expr_list RPAREN
Rule 80    subscript_left -> subscript_left LBRACKET expr RBRACKET
Rule 81    subscript_left -> symbol LBRACKET expr RBRACKET
Rule 82    subscript_expr -> expr LBRACKET expr RBRACKET
Rule 83    anon_function_expr -> FUNCTION LPAREN RPAREN block
Rule 84    anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block
Rule 85    anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block
Rule 86    anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
Rule 87    unary_expr -> MINUS expr
Rule 88    unary_expr -> NOT expr
Rule 89    binary_expr -> expr EQ expr
Rule 90    binary_expr -> expr NE expr
Rule 91    binary_expr -> expr GT expr
Rule 92    binary_expr -> expr GE expr
Rule 93    binary_expr -> expr LT expr
Rule 94    binary_expr -> expr LE expr
Rule 95    binary_expr -> expr PLUS expr
Rule 96    binary_expr -> expr MINUS expr
Rule 97    binary_expr -> expr MUL expr
Rule 98    binary_expr -> expr DIV expr
Rule 99    binary_expr -> expr REGEX expr
Rule 100   binary_expr -> expr AND expr
Rule 101   binary_expr -> expr OR expr
Rule 102   binary_expr -> expr NOT expr
Rule 103   binary_expr -> expr MOD expr
Rule 104   command -> command_item
Rule 105   command -> command_item parameter_list
Rule 106   command -> command_item PIPE command
Rule 107   command -> command_item parameter_list PIPE command
Rule 108   command_item -> LIST
Rule 109   command_item -> NUMBER
Rule 110   command_item -> UP
Rule 111   command_item -> symbol
Rule 112   command_item -> COPEN expr RBRACE
Rule 113   command_item -> STRING
Rule 114   parameter_list -> parameter
Rule 115   parameter_list -> parameter parameter_list
Rule 116   parameter -> set_parameter
Rule 117   parameter -> binary_parameter
Rule 118   parameter -> error
Rule 119   set_parameter -> unary_parameter
Rule 120   set_parameter -> unary_parameter COMMA set_parameter
Rule 121   set_parameter -> unary_parameter COMMA error
Rule 122   unary_parameter -> symbol
Rule 123   unary_parameter -> literal
Rule 124   unary_parameter -> array_literal
Rule 125   unary_parameter -> dict_literal
Rule 126   unary_parameter -> COPEN expr RBRACE
Rule 127   unary_parameter -> LIST
Rule 128   unary_parameter -> UP
Rule 129   binary_parameter -> ATOM ASSIGN parameter
Rule 130   binary_parameter -> ATOM EQ parameter
Rule 131   binary_parameter -> ATOM NE parameter
Rule 132   binary_parameter -> ATOM GT parameter
Rule 133   binary_parameter -> ATOM GE parameter
Rule 134   binary_parameter -> ATOM LT parameter
Rule 135   binary_parameter -> ATOM LE parameter
Rule 136   binary_parameter -> ATOM REGEX parameter
Rule 137   binary_parameter -> ATOM INC parameter
Rule 138   binary_parameter -> ATOM DEC parameter
Rule 139   shell -> SHELL
Rule 140   shell -> SHELL parameter_list

Terminals, with rules where they appear

AND                  : 100
ASSIGN               : 30 31 32 129
ATOM                 : 6 27 28 28 30 33 34 35 36 37 38 42 77 78 79 129 130 131 132 133 134 135 136 137 138
BINNUMBER            : 71
BREAK                : 41
COLON                : 66 67 68
COMMA                : 28 38 44 65 120 121
CONST                : 32
COPEN                : 56 112 126
DEC                  : 138
DIV                  : 98
ELSE                 : 26
EOPEN                : 58
EQ                   : 89 130
FALSE                : 75
FOR                  : 27 28
FUNCTION             : 33 34 35 36 83 84 85 86
GE                   : 92 133
GT                   : 91 132
HEXNUMBER            : 70
IF                   : 25 26
IN                   : 27 28
INC                  : 137
LBRACE               : 21 22 23 24 61 62 63
LBRACKET             : 59 60 80 81 82
LE                   : 94 135
LIST                 : 108 127
LPAREN               : 25 26 27 28 29 33 34 35 36 57 78 79 83 84 85 86
LT                   : 93 134
MINUS                : 87 96
MOD                  : 103
MUL                  : 97
NE                   : 90 131
NEWLINE              : 2 3 4 22 23 35 36 62 67 68 68 84 86
NOT                  : 88 102
NULL                 : 76
NUMBER               : 69 109
OCTNUMBER            : 72
OR                   : 101
PIPE                 : 106 107
PLUS                 : 95
RBRACE               : 21 22 23 24 56 61 62 63 112 126
RBRACKET             : 59 60 80 81 82
REDIRECT             : 6 7
REGEX                : 99 136
RETURN               : 39 40
RPAREN               : 25 26 27 28 29 33 34 35 36 57 58 78 79 83 84 85 86
SHELL                : 139 140
STRING               : 7 73 113
TRUE                 : 74
UNDEF                : 42
UP                   : 110 128
WHILE                : 29
error                : 118 121

Nonterminals, with rules where they appear

anon_function_expr   : 53
array_literal        : 47 124
assignment_stmt      : 11
binary_expr          : 50
binary_parameter     : 117
block                : 25 26 26 27 28 29 33 34 35 36 83 84 85 86
break_stmt           : 14
call                 : 18 51
command              : 17 58 106 107
command_item         : 104 105 106 107
const_stmt           : 16
dict_literal         : 48 125
dict_pair            : 64 65
dict_pair_list       : 63 65
expr                 : 25 26 27 28 29 30 31 32 40 43 44 56 57 66 66 67 67 68 68 80 81 82 82 87 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 112 126
expr_expansion       : 54
expr_list            : 44 60 79
expr_parens          : 19 55
for_stmt             : 9
function_argument_list : 34 36 38 85 86
function_definition_stmt : 12
if_stmt              : 8
literal              : 46 123
parameter            : 114 115 129 130 131 132 133 134 135 136 137 138
parameter_list       : 105 107 115 140
return_stmt          : 13
set_parameter        : 116 120
shell                : 20
stmt                 : 5 6 7
stmt_list            : 3 4 21 22 0
stmt_redirect        : 1 2 3
subscript_expr       : 52
subscript_left       : 31 80
symbol               : 32 45 81 111 122
unary_expr           : 49
unary_parameter      : 119 120 121
undef_stmt           : 15
while_stmt           : 10

Parsing method: LALR

state 0

    (0) S' -> . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . const_stmt
    (17) stmt -> . command
    (18) stmt -> . call
    (19) stmt -> . expr_parens
    (20) stmt -> . shell
    (25) if_stmt -> . IF LPAREN expr RPAREN block
    (26) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (27) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (28) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (29) while_stmt -> . WHILE LPAREN expr RPAREN block
    (30) assignment_stmt -> . ATOM ASSIGN expr
    (31) assignment_stmt -> . subscript_left ASSIGN expr
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (34) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (39) return_stmt -> . RETURN
    (40) return_stmt -> . RETURN expr
    (41) break_stmt -> . BREAK
    (42) undef_stmt -> . UNDEF ATOM
    (32) const_stmt -> . CONST symbol ASSIGN expr
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN
    (139) shell -> . SHELL
    (140) shell -> . SHELL parameter_list
    (80) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (81) subscript_left -> . symbol LBRACKET expr RBRACKET
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    NEWLINE         shift and go to state 1
    IF              shift and go to state 16
    FOR             shift and go to state 19
    WHILE           shift and go to state 32
    ATOM            shift and go to state 31
    FUNCTION        shift and go to state 15
    RETURN          shift and go to state 12
    BREAK           shift and go to state 35
    UNDEF           shift and go to state 30
    CONST           shift and go to state 34
    LPAREN          shift and go to state 3
    SHELL           shift and go to state 22
    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5

    return_stmt                    shift and go to state 2
    while_stmt                     shift and go to state 4
    call                           shift and go to state 6
    subscript_left                 shift and go to state 9
    stmt                           shift and go to state 26
    command                        shift and go to state 28
    shell                          shift and go to state 20
    stmt_list                      shift and go to state 17
    command_item                   shift and go to state 8
    if_stmt                        shift and go to state 25
    const_stmt                     shift and go to state 10
    symbol                         shift and go to state 33
    assignment_stmt                shift and go to state 13
    stmt_redirect                  shift and go to state 14
    function_definition_stmt       shift and go to state 11
    break_stmt                     shift and go to state 7
    for_stmt                       shift and go to state 18
    undef_stmt                     shift and go to state 29
    expr_parens                    shift and go to state 21

state 1

    (4) stmt_list -> NEWLINE . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . const_stmt
    (17) stmt -> . command
    (18) stmt -> . call
    (19) stmt -> . expr_parens
    (20) stmt -> . shell
    (25) if_stmt -> . IF LPAREN expr RPAREN block
    (26) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (27) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (28) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (29) while_stmt -> . WHILE LPAREN expr RPAREN block
    (30) assignment_stmt -> . ATOM ASSIGN expr
    (31) assignment_stmt -> . subscript_left ASSIGN expr
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (34) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (39) return_stmt -> . RETURN
    (40) return_stmt -> . RETURN expr
    (41) break_stmt -> . BREAK
    (42) undef_stmt -> . UNDEF ATOM
    (32) const_stmt -> . CONST symbol ASSIGN expr
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN
    (139) shell -> . SHELL
    (140) shell -> . SHELL parameter_list
    (80) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (81) subscript_left -> . symbol LBRACKET expr RBRACKET
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    NEWLINE         shift and go to state 1
    IF              shift and go to state 16
    FOR             shift and go to state 19
    WHILE           shift and go to state 32
    ATOM            shift and go to state 31
    FUNCTION        shift and go to state 15
    RETURN          shift and go to state 12
    BREAK           shift and go to state 35
    UNDEF           shift and go to state 30
    CONST           shift and go to state 34
    LPAREN          shift and go to state 3
    SHELL           shift and go to state 22
    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5

    return_stmt                    shift and go to state 2
    while_stmt                     shift and go to state 4
    call                           shift and go to state 6
    subscript_left                 shift and go to state 9
    stmt                           shift and go to state 26
    command                        shift and go to state 28
    shell                          shift and go to state 20
    stmt_list                      shift and go to state 37
    command_item                   shift and go to state 8
    if_stmt                        shift and go to state 25
    const_stmt                     shift and go to state 10
    symbol                         shift and go to state 33
    assignment_stmt                shift and go to state 13
    stmt_redirect                  shift and go to state 14
    function_definition_stmt       shift and go to state 11
    break_stmt                     shift and go to state 7
    for_stmt                       shift and go to state 18
    undef_stmt                     shift and go to state 29
    expr_parens                    shift and go to state 21

state 2

    (13) stmt -> return_stmt .

    REDIRECT        reduce using rule 13 (stmt -> return_stmt .)
    NEWLINE         reduce using rule 13 (stmt -> return_stmt .)
    RBRACE          reduce using rule 13 (stmt -> return_stmt .)
    $end            reduce using rule 13 (stmt -> return_stmt .)


state 3

    (57) expr_parens -> LPAREN . expr RPAREN
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 54
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 4

    (10) stmt -> while_stmt .

    REDIRECT        reduce using rule 10 (stmt -> while_stmt .)
    NEWLINE         reduce using rule 10 (stmt -> while_stmt .)
    RBRACE          reduce using rule 10 (stmt -> while_stmt .)
    $end            reduce using rule 10 (stmt -> while_stmt .)


state 5

    (113) command_item -> STRING .

    PIPE            reduce using rule 113 (command_item -> STRING .)
    error           reduce using rule 113 (command_item -> STRING .)
    ATOM            reduce using rule 113 (command_item -> STRING .)
    COPEN           reduce using rule 113 (command_item -> STRING .)
    LIST            reduce using rule 113 (command_item -> STRING .)
    UP              reduce using rule 113 (command_item -> STRING .)
    NUMBER          reduce using rule 113 (command_item -> STRING .)
    HEXNUMBER       reduce using rule 113 (command_item -> STRING .)
    BINNUMBER       reduce using rule 113 (command_item -> STRING .)
    OCTNUMBER       reduce using rule 113 (command_item -> STRING .)
    STRING          reduce using rule 113 (command_item -> STRING .)
    TRUE            reduce using rule 113 (command_item -> STRING .)
    FALSE           reduce using rule 113 (command_item -> STRING .)
    NULL            reduce using rule 113 (command_item -> STRING .)
    LBRACKET        reduce using rule 113 (command_item -> STRING .)
    LBRACE          reduce using rule 113 (command_item -> STRING .)
    REDIRECT        reduce using rule 113 (command_item -> STRING .)
    NEWLINE         reduce using rule 113 (command_item -> STRING .)
    $end            reduce using rule 113 (command_item -> STRING .)
    RBRACE          reduce using rule 113 (command_item -> STRING .)
    RPAREN          reduce using rule 113 (command_item -> STRING .)


state 6

    (18) stmt -> call .

    REDIRECT        reduce using rule 18 (stmt -> call .)
    NEWLINE         reduce using rule 18 (stmt -> call .)
    RBRACE          reduce using rule 18 (stmt -> call .)
    $end            reduce using rule 18 (stmt -> call .)


state 7

    (14) stmt -> break_stmt .

    REDIRECT        reduce using rule 14 (stmt -> break_stmt .)
    NEWLINE         reduce using rule 14 (stmt -> break_stmt .)
    RBRACE          reduce using rule 14 (stmt -> break_stmt .)
    $end            reduce using rule 14 (stmt -> break_stmt .)


state 8

    (104) command -> command_item .
    (105) command -> command_item . parameter_list
    (106) command -> command_item . PIPE command
    (107) command -> command_item . parameter_list PIPE command
    (114) parameter_list -> . parameter
    (115) parameter_list -> . parameter parameter_list
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    REDIRECT        reduce using rule 104 (command -> command_item .)
    NEWLINE         reduce using rule 104 (command -> command_item .)
    RBRACE          reduce using rule 104 (command -> command_item .)
    $end            reduce using rule 104 (command -> command_item .)
    RPAREN          reduce using rule 104 (command -> command_item .)
    PIPE            shift and go to state 67
    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 76
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    parameter_list                 shift and go to state 78
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75
    unary_parameter                shift and go to state 80
    array_literal                  shift and go to state 68
    literal                        shift and go to state 70

state 9

    (31) assignment_stmt -> subscript_left . ASSIGN expr
    (80) subscript_left -> subscript_left . LBRACKET expr RBRACKET

    ASSIGN          shift and go to state 82
    LBRACKET        shift and go to state 81


state 10

    (16) stmt -> const_stmt .

    REDIRECT        reduce using rule 16 (stmt -> const_stmt .)
    NEWLINE         reduce using rule 16 (stmt -> const_stmt .)
    RBRACE          reduce using rule 16 (stmt -> const_stmt .)
    $end            reduce using rule 16 (stmt -> const_stmt .)


state 11

    (12) stmt -> function_definition_stmt .

    REDIRECT        reduce using rule 12 (stmt -> function_definition_stmt .)
    NEWLINE         reduce using rule 12 (stmt -> function_definition_stmt .)
    RBRACE          reduce using rule 12 (stmt -> function_definition_stmt .)
    $end            reduce using rule 12 (stmt -> function_definition_stmt .)


state 12

    (39) return_stmt -> RETURN .
    (40) return_stmt -> RETURN . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    REDIRECT        reduce using rule 39 (return_stmt -> RETURN .)
    NEWLINE         reduce using rule 39 (return_stmt -> RETURN .)
    $end            reduce using rule 39 (return_stmt -> RETURN .)
    RBRACE          reduce using rule 39 (return_stmt -> RETURN .)
    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 83
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 13

    (11) stmt -> assignment_stmt .

    REDIRECT        reduce using rule 11 (stmt -> assignment_stmt .)
    NEWLINE         reduce using rule 11 (stmt -> assignment_stmt .)
    RBRACE          reduce using rule 11 (stmt -> assignment_stmt .)
    $end            reduce using rule 11 (stmt -> assignment_stmt .)


state 14

    (1) stmt_list -> stmt_redirect .
    (2) stmt_list -> stmt_redirect . NEWLINE
    (3) stmt_list -> stmt_redirect . NEWLINE stmt_list

    RBRACE          reduce using rule 1 (stmt_list -> stmt_redirect .)
    $end            reduce using rule 1 (stmt_list -> stmt_redirect .)
    NEWLINE         shift and go to state 84


state 15

    (33) function_definition_stmt -> FUNCTION . ATOM LPAREN RPAREN block
    (34) function_definition_stmt -> FUNCTION . ATOM LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> FUNCTION . ATOM LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> FUNCTION . ATOM LPAREN function_argument_list RPAREN NEWLINE block

    ATOM            shift and go to state 85


state 16

    (25) if_stmt -> IF . LPAREN expr RPAREN block
    (26) if_stmt -> IF . LPAREN expr RPAREN block ELSE block

    LPAREN          shift and go to state 86


state 17

    (0) S' -> stmt_list .



state 18

    (9) stmt -> for_stmt .

    REDIRECT        reduce using rule 9 (stmt -> for_stmt .)
    NEWLINE         reduce using rule 9 (stmt -> for_stmt .)
    RBRACE          reduce using rule 9 (stmt -> for_stmt .)
    $end            reduce using rule 9 (stmt -> for_stmt .)


state 19

    (27) for_stmt -> FOR . LPAREN ATOM IN expr RPAREN block
    (28) for_stmt -> FOR . LPAREN ATOM COMMA ATOM IN expr RPAREN block

    LPAREN          shift and go to state 87


state 20

    (20) stmt -> shell .

    REDIRECT        reduce using rule 20 (stmt -> shell .)
    NEWLINE         reduce using rule 20 (stmt -> shell .)
    RBRACE          reduce using rule 20 (stmt -> shell .)
    $end            reduce using rule 20 (stmt -> shell .)


state 21

    (19) stmt -> expr_parens .

    REDIRECT        reduce using rule 19 (stmt -> expr_parens .)
    NEWLINE         reduce using rule 19 (stmt -> expr_parens .)
    RBRACE          reduce using rule 19 (stmt -> expr_parens .)
    $end            reduce using rule 19 (stmt -> expr_parens .)


state 22

    (139) shell -> SHELL .
    (140) shell -> SHELL . parameter_list
    (114) parameter_list -> . parameter
    (115) parameter_list -> . parameter parameter_list
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    REDIRECT        reduce using rule 139 (shell -> SHELL .)
    NEWLINE         reduce using rule 139 (shell -> SHELL .)
    RBRACE          reduce using rule 139 (shell -> SHELL .)
    $end            reduce using rule 139 (shell -> SHELL .)
    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 76
    symbol                         shift and go to state 77
    parameter_list                 shift and go to state 88
    set_parameter                  shift and go to state 66
    dict_literal                   shift and go to state 72
    binary_parameter               shift and go to state 75
    unary_parameter                shift and go to state 80
    array_literal                  shift and go to state 68
    literal                        shift and go to state 70

state 23

    (112) command_item -> COPEN . expr RBRACE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 89
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 24

    (110) command_item -> UP .

    PIPE            reduce using rule 110 (command_item -> UP .)
    error           reduce using rule 110 (command_item -> UP .)
    ATOM            reduce using rule 110 (command_item -> UP .)
    COPEN           reduce using rule 110 (command_item -> UP .)
    LIST            reduce using rule 110 (command_item -> UP .)
    UP              reduce using rule 110 (command_item -> UP .)
    NUMBER          reduce using rule 110 (command_item -> UP .)
    HEXNUMBER       reduce using rule 110 (command_item -> UP .)
    BINNUMBER       reduce using rule 110 (command_item -> UP .)
    OCTNUMBER       reduce using rule 110 (command_item -> UP .)
    STRING          reduce using rule 110 (command_item -> UP .)
    TRUE            reduce using rule 110 (command_item -> UP .)
    FALSE           reduce using rule 110 (command_item -> UP .)
    NULL            reduce using rule 110 (command_item -> UP .)
    LBRACKET        reduce using rule 110 (command_item -> UP .)
    LBRACE          reduce using rule 110 (command_item -> UP .)
    REDIRECT        reduce using rule 110 (command_item -> UP .)
    NEWLINE         reduce using rule 110 (command_item -> UP .)
    $end            reduce using rule 110 (command_item -> UP .)
    RBRACE          reduce using rule 110 (command_item -> UP .)
    RPAREN          reduce using rule 110 (command_item -> UP .)


state 25

    (8) stmt -> if_stmt .

    REDIRECT        reduce using rule 8 (stmt -> if_stmt .)
    NEWLINE         reduce using rule 8 (stmt -> if_stmt .)
    RBRACE          reduce using rule 8 (stmt -> if_stmt .)
    $end            reduce using rule 8 (stmt -> if_stmt .)


state 26

    (5) stmt_redirect -> stmt .
    (6) stmt_redirect -> stmt . REDIRECT ATOM
    (7) stmt_redirect -> stmt . REDIRECT STRING

    NEWLINE         reduce using rule 5 (stmt_redirect -> stmt .)
    RBRACE          reduce using rule 5 (stmt_redirect -> stmt .)
    $end            reduce using rule 5 (stmt_redirect -> stmt .)
    REDIRECT        shift and go to state 90


state 27

    (108) command_item -> LIST .

    PIPE            reduce using rule 108 (command_item -> LIST .)
    error           reduce using rule 108 (command_item -> LIST .)
    ATOM            reduce using rule 108 (command_item -> LIST .)
    COPEN           reduce using rule 108 (command_item -> LIST .)
    LIST            reduce using rule 108 (command_item -> LIST .)
    UP              reduce using rule 108 (command_item -> LIST .)
    NUMBER          reduce using rule 108 (command_item -> LIST .)
    HEXNUMBER       reduce using rule 108 (command_item -> LIST .)
    BINNUMBER       reduce using rule 108 (command_item -> LIST .)
    OCTNUMBER       reduce using rule 108 (command_item -> LIST .)
    STRING          reduce using rule 108 (command_item -> LIST .)
    TRUE            reduce using rule 108 (command_item -> LIST .)
    FALSE           reduce using rule 108 (command_item -> LIST .)
    NULL            reduce using rule 108 (command_item -> LIST .)
    LBRACKET        reduce using rule 108 (command_item -> LIST .)
    LBRACE          reduce using rule 108 (command_item -> LIST .)
    REDIRECT        reduce using rule 108 (command_item -> LIST .)
    NEWLINE         reduce using rule 108 (command_item -> LIST .)
    $end            reduce using rule 108 (command_item -> LIST .)
    RBRACE          reduce using rule 108 (command_item -> LIST .)
    RPAREN          reduce using rule 108 (command_item -> LIST .)


state 28

    (17) stmt -> command .

    REDIRECT        reduce using rule 17 (stmt -> command .)
    NEWLINE         reduce using rule 17 (stmt -> command .)
    RBRACE          reduce using rule 17 (stmt -> command .)
    $end            reduce using rule 17 (stmt -> command .)


state 29

    (15) stmt -> undef_stmt .

    REDIRECT        reduce using rule 15 (stmt -> undef_stmt .)
    NEWLINE         reduce using rule 15 (stmt -> undef_stmt .)
    RBRACE          reduce using rule 15 (stmt -> undef_stmt .)
    $end            reduce using rule 15 (stmt -> undef_stmt .)


state 30

    (42) undef_stmt -> UNDEF . ATOM

    ATOM            shift and go to state 91


state 31

    (30) assignment_stmt -> ATOM . ASSIGN expr
    (78) call -> ATOM . LPAREN RPAREN
    (79) call -> ATOM . LPAREN expr_list RPAREN
    (77) symbol -> ATOM .

    ASSIGN          shift and go to state 93
    LPAREN          shift and go to state 92
    LBRACKET        reduce using rule 77 (symbol -> ATOM .)
    PIPE            reduce using rule 77 (symbol -> ATOM .)
    error           reduce using rule 77 (symbol -> ATOM .)
    ATOM            reduce using rule 77 (symbol -> ATOM .)
    COPEN           reduce using rule 77 (symbol -> ATOM .)
    LIST            reduce using rule 77 (symbol -> ATOM .)
    UP              reduce using rule 77 (symbol -> ATOM .)
    NUMBER          reduce using rule 77 (symbol -> ATOM .)
    HEXNUMBER       reduce using rule 77 (symbol -> ATOM .)
    BINNUMBER       reduce using rule 77 (symbol -> ATOM .)
    OCTNUMBER       reduce using rule 77 (symbol -> ATOM .)
    STRING          reduce using rule 77 (symbol -> ATOM .)
    TRUE            reduce using rule 77 (symbol -> ATOM .)
    FALSE           reduce using rule 77 (symbol -> ATOM .)
    NULL            reduce using rule 77 (symbol -> ATOM .)
    LBRACE          reduce using rule 77 (symbol -> ATOM .)
    REDIRECT        reduce using rule 77 (symbol -> ATOM .)
    NEWLINE         reduce using rule 77 (symbol -> ATOM .)
    $end            reduce using rule 77 (symbol -> ATOM .)
    RBRACE          reduce using rule 77 (symbol -> ATOM .)


state 32

    (29) while_stmt -> WHILE . LPAREN expr RPAREN block

    LPAREN          shift and go to state 94


state 33

    (81) subscript_left -> symbol . LBRACKET expr RBRACKET
    (111) command_item -> symbol .

    LBRACKET        shift and go to state 95
    PIPE            reduce using rule 111 (command_item -> symbol .)
    error           reduce using rule 111 (command_item -> symbol .)
    ATOM            reduce using rule 111 (command_item -> symbol .)
    COPEN           reduce using rule 111 (command_item -> symbol .)
    LIST            reduce using rule 111 (command_item -> symbol .)
    UP              reduce using rule 111 (command_item -> symbol .)
    NUMBER          reduce using rule 111 (command_item -> symbol .)
    HEXNUMBER       reduce using rule 111 (command_item -> symbol .)
    BINNUMBER       reduce using rule 111 (command_item -> symbol .)
    OCTNUMBER       reduce using rule 111 (command_item -> symbol .)
    STRING          reduce using rule 111 (command_item -> symbol .)
    TRUE            reduce using rule 111 (command_item -> symbol .)
    FALSE           reduce using rule 111 (command_item -> symbol .)
    NULL            reduce using rule 111 (command_item -> symbol .)
    LBRACE          reduce using rule 111 (command_item -> symbol .)
    REDIRECT        reduce using rule 111 (command_item -> symbol .)
    NEWLINE         reduce using rule 111 (command_item -> symbol .)
    $end            reduce using rule 111 (command_item -> symbol .)
    RBRACE          reduce using rule 111 (command_item -> symbol .)

  ! LBRACKET        [ reduce using rule 111 (command_item -> symbol .) ]


state 34

    (32) const_stmt -> CONST . symbol ASSIGN expr
    (77) symbol -> . ATOM

    ATOM            shift and go to state 97

    symbol                         shift and go to state 96

state 35

    (41) break_stmt -> BREAK .

    REDIRECT        reduce using rule 41 (break_stmt -> BREAK .)
    NEWLINE         reduce using rule 41 (break_stmt -> BREAK .)
    RBRACE          reduce using rule 41 (break_stmt -> BREAK .)
    $end            reduce using rule 41 (break_stmt -> BREAK .)


state 36

    (109) command_item -> NUMBER .

    PIPE            reduce using rule 109 (command_item -> NUMBER .)
    error           reduce using rule 109 (command_item -> NUMBER .)
    ATOM            reduce using rule 109 (command_item -> NUMBER .)
    COPEN           reduce using rule 109 (command_item -> NUMBER .)
    LIST            reduce using rule 109 (command_item -> NUMBER .)
    UP              reduce using rule 109 (command_item -> NUMBER .)
    NUMBER          reduce using rule 109 (command_item -> NUMBER .)
    HEXNUMBER       reduce using rule 109 (command_item -> NUMBER .)
    BINNUMBER       reduce using rule 109 (command_item -> NUMBER .)
    OCTNUMBER       reduce using rule 109 (command_item -> NUMBER .)
    STRING          reduce using rule 109 (command_item -> NUMBER .)
    TRUE            reduce using rule 109 (command_item -> NUMBER .)
    FALSE           reduce using rule 109 (command_item -> NUMBER .)
    NULL            reduce using rule 109 (command_item -> NUMBER .)
    LBRACKET        reduce using rule 109 (command_item -> NUMBER .)
    LBRACE          reduce using rule 109 (command_item -> NUMBER .)
    REDIRECT        reduce using rule 109 (command_item -> NUMBER .)
    NEWLINE         reduce using rule 109 (command_item -> NUMBER .)
    $end            reduce using rule 109 (command_item -> NUMBER .)
    RBRACE          reduce using rule 109 (command_item -> NUMBER .)
    RPAREN          reduce using rule 109 (command_item -> NUMBER .)


state 37

    (4) stmt_list -> NEWLINE stmt_list .

    RBRACE          reduce using rule 4 (stmt_list -> NEWLINE stmt_list .)
    $end            reduce using rule 4 (stmt_list -> NEWLINE stmt_list .)


state 38

    (75) literal -> FALSE .

    EQ              reduce using rule 75 (literal -> FALSE .)
    NE              reduce using rule 75 (literal -> FALSE .)
    GT              reduce using rule 75 (literal -> FALSE .)
    GE              reduce using rule 75 (literal -> FALSE .)
    LT              reduce using rule 75 (literal -> FALSE .)
    LE              reduce using rule 75 (literal -> FALSE .)
    PLUS            reduce using rule 75 (literal -> FALSE .)
    MINUS           reduce using rule 75 (literal -> FALSE .)
    MUL             reduce using rule 75 (literal -> FALSE .)
    DIV             reduce using rule 75 (literal -> FALSE .)
    REGEX           reduce using rule 75 (literal -> FALSE .)
    AND             reduce using rule 75 (literal -> FALSE .)
    OR              reduce using rule 75 (literal -> FALSE .)
    NOT             reduce using rule 75 (literal -> FALSE .)
    MOD             reduce using rule 75 (literal -> FALSE .)
    LBRACKET        reduce using rule 75 (literal -> FALSE .)
    RPAREN          reduce using rule 75 (literal -> FALSE .)
    REDIRECT        reduce using rule 75 (literal -> FALSE .)
    NEWLINE         reduce using rule 75 (literal -> FALSE .)
    $end            reduce using rule 75 (literal -> FALSE .)
    RBRACE          reduce using rule 75 (literal -> FALSE .)
    COMMA           reduce using rule 75 (literal -> FALSE .)
    RBRACKET        reduce using rule 75 (literal -> FALSE .)
    COLON           reduce using rule 75 (literal -> FALSE .)
    error           reduce using rule 75 (literal -> FALSE .)
    ATOM            reduce using rule 75 (literal -> FALSE .)
    COPEN           reduce using rule 75 (literal -> FALSE .)
    LIST            reduce using rule 75 (literal -> FALSE .)
    UP              reduce using rule 75 (literal -> FALSE .)
    NUMBER          reduce using rule 75 (literal -> FALSE .)
    HEXNUMBER       reduce using rule 75 (literal -> FALSE .)
    BINNUMBER       reduce using rule 75 (literal -> FALSE .)
    OCTNUMBER       reduce using rule 75 (literal -> FALSE .)
    STRING          reduce using rule 75 (literal -> FALSE .)
    TRUE            reduce using rule 75 (literal -> FALSE .)
    FALSE           reduce using rule 75 (literal -> FALSE .)
    NULL            reduce using rule 75 (literal -> FALSE .)
    LBRACE          reduce using rule 75 (literal -> FALSE .)
    PIPE            reduce using rule 75 (literal -> FALSE .)


state 39

    (69) literal -> NUMBER .

    EQ              reduce using rule 69 (literal -> NUMBER .)
    NE              reduce using rule 69 (literal -> NUMBER .)
    GT              reduce using rule 69 (literal -> NUMBER .)
    GE              reduce using rule 69 (literal -> NUMBER .)
    LT              reduce using rule 69 (literal -> NUMBER .)
    LE              reduce using rule 69 (literal -> NUMBER .)
    PLUS            reduce using rule 69 (literal -> NUMBER .)
    MINUS           reduce using rule 69 (literal -> NUMBER .)
    MUL             reduce using rule 69 (literal -> NUMBER .)
    DIV             reduce using rule 69 (literal -> NUMBER .)
    REGEX           reduce using rule 69 (literal -> NUMBER .)
    AND             reduce using rule 69 (literal -> NUMBER .)
    OR              reduce using rule 69 (literal -> NUMBER .)
    NOT             reduce using rule 69 (literal -> NUMBER .)
    MOD             reduce using rule 69 (literal -> NUMBER .)
    LBRACKET        reduce using rule 69 (literal -> NUMBER .)
    RPAREN          reduce using rule 69 (literal -> NUMBER .)
    REDIRECT        reduce using rule 69 (literal -> NUMBER .)
    NEWLINE         reduce using rule 69 (literal -> NUMBER .)
    $end            reduce using rule 69 (literal -> NUMBER .)
    RBRACE          reduce using rule 69 (literal -> NUMBER .)
    COMMA           reduce using rule 69 (literal -> NUMBER .)
    RBRACKET        reduce using rule 69 (literal -> NUMBER .)
    COLON           reduce using rule 69 (literal -> NUMBER .)
    error           reduce using rule 69 (literal -> NUMBER .)
    ATOM            reduce using rule 69 (literal -> NUMBER .)
    COPEN           reduce using rule 69 (literal -> NUMBER .)
    LIST            reduce using rule 69 (literal -> NUMBER .)
    UP              reduce using rule 69 (literal -> NUMBER .)
    NUMBER          reduce using rule 69 (literal -> NUMBER .)
    HEXNUMBER       reduce using rule 69 (literal -> NUMBER .)
    BINNUMBER       reduce using rule 69 (literal -> NUMBER .)
    OCTNUMBER       reduce using rule 69 (literal -> NUMBER .)
    STRING          reduce using rule 69 (literal -> NUMBER .)
    TRUE            reduce using rule 69 (literal -> NUMBER .)
    FALSE           reduce using rule 69 (literal -> NUMBER .)
    NULL            reduce using rule 69 (literal -> NUMBER .)
    LBRACE          reduce using rule 69 (literal -> NUMBER .)
    PIPE            reduce using rule 69 (literal -> NUMBER .)


state 40

    (73) literal -> STRING .

    EQ              reduce using rule 73 (literal -> STRING .)
    NE              reduce using rule 73 (literal -> STRING .)
    GT              reduce using rule 73 (literal -> STRING .)
    GE              reduce using rule 73 (literal -> STRING .)
    LT              reduce using rule 73 (literal -> STRING .)
    LE              reduce using rule 73 (literal -> STRING .)
    PLUS            reduce using rule 73 (literal -> STRING .)
    MINUS           reduce using rule 73 (literal -> STRING .)
    MUL             reduce using rule 73 (literal -> STRING .)
    DIV             reduce using rule 73 (literal -> STRING .)
    REGEX           reduce using rule 73 (literal -> STRING .)
    AND             reduce using rule 73 (literal -> STRING .)
    OR              reduce using rule 73 (literal -> STRING .)
    NOT             reduce using rule 73 (literal -> STRING .)
    MOD             reduce using rule 73 (literal -> STRING .)
    LBRACKET        reduce using rule 73 (literal -> STRING .)
    RPAREN          reduce using rule 73 (literal -> STRING .)
    REDIRECT        reduce using rule 73 (literal -> STRING .)
    NEWLINE         reduce using rule 73 (literal -> STRING .)
    $end            reduce using rule 73 (literal -> STRING .)
    RBRACE          reduce using rule 73 (literal -> STRING .)
    COMMA           reduce using rule 73 (literal -> STRING .)
    RBRACKET        reduce using rule 73 (literal -> STRING .)
    COLON           reduce using rule 73 (literal -> STRING .)
    error           reduce using rule 73 (literal -> STRING .)
    ATOM            reduce using rule 73 (literal -> STRING .)
    COPEN           reduce using rule 73 (literal -> STRING .)
    LIST            reduce using rule 73 (literal -> STRING .)
    UP              reduce using rule 73 (literal -> STRING .)
    NUMBER          reduce using rule 73 (literal -> STRING .)
    HEXNUMBER       reduce using rule 73 (literal -> STRING .)
    BINNUMBER       reduce using rule 73 (literal -> STRING .)
    OCTNUMBER       reduce using rule 73 (literal -> STRING .)
    STRING          reduce using rule 73 (literal -> STRING .)
    TRUE            reduce using rule 73 (literal -> STRING .)
    FALSE           reduce using rule 73 (literal -> STRING .)
    NULL            reduce using rule 73 (literal -> STRING .)
    LBRACE          reduce using rule 73 (literal -> STRING .)
    PIPE            reduce using rule 73 (literal -> STRING .)


state 41

    (51) expr -> call .

    EQ              reduce using rule 51 (expr -> call .)
    NE              reduce using rule 51 (expr -> call .)
    GT              reduce using rule 51 (expr -> call .)
    GE              reduce using rule 51 (expr -> call .)
    LT              reduce using rule 51 (expr -> call .)
    LE              reduce using rule 51 (expr -> call .)
    PLUS            reduce using rule 51 (expr -> call .)
    MINUS           reduce using rule 51 (expr -> call .)
    MUL             reduce using rule 51 (expr -> call .)
    DIV             reduce using rule 51 (expr -> call .)
    REGEX           reduce using rule 51 (expr -> call .)
    AND             reduce using rule 51 (expr -> call .)
    OR              reduce using rule 51 (expr -> call .)
    NOT             reduce using rule 51 (expr -> call .)
    MOD             reduce using rule 51 (expr -> call .)
    LBRACKET        reduce using rule 51 (expr -> call .)
    RPAREN          reduce using rule 51 (expr -> call .)
    REDIRECT        reduce using rule 51 (expr -> call .)
    NEWLINE         reduce using rule 51 (expr -> call .)
    $end            reduce using rule 51 (expr -> call .)
    RBRACE          reduce using rule 51 (expr -> call .)
    COMMA           reduce using rule 51 (expr -> call .)
    RBRACKET        reduce using rule 51 (expr -> call .)
    COLON           reduce using rule 51 (expr -> call .)


state 42

    (70) literal -> HEXNUMBER .

    EQ              reduce using rule 70 (literal -> HEXNUMBER .)
    NE              reduce using rule 70 (literal -> HEXNUMBER .)
    GT              reduce using rule 70 (literal -> HEXNUMBER .)
    GE              reduce using rule 70 (literal -> HEXNUMBER .)
    LT              reduce using rule 70 (literal -> HEXNUMBER .)
    LE              reduce using rule 70 (literal -> HEXNUMBER .)
    PLUS            reduce using rule 70 (literal -> HEXNUMBER .)
    MINUS           reduce using rule 70 (literal -> HEXNUMBER .)
    MUL             reduce using rule 70 (literal -> HEXNUMBER .)
    DIV             reduce using rule 70 (literal -> HEXNUMBER .)
    REGEX           reduce using rule 70 (literal -> HEXNUMBER .)
    AND             reduce using rule 70 (literal -> HEXNUMBER .)
    OR              reduce using rule 70 (literal -> HEXNUMBER .)
    NOT             reduce using rule 70 (literal -> HEXNUMBER .)
    MOD             reduce using rule 70 (literal -> HEXNUMBER .)
    LBRACKET        reduce using rule 70 (literal -> HEXNUMBER .)
    RPAREN          reduce using rule 70 (literal -> HEXNUMBER .)
    REDIRECT        reduce using rule 70 (literal -> HEXNUMBER .)
    NEWLINE         reduce using rule 70 (literal -> HEXNUMBER .)
    $end            reduce using rule 70 (literal -> HEXNUMBER .)
    RBRACE          reduce using rule 70 (literal -> HEXNUMBER .)
    COMMA           reduce using rule 70 (literal -> HEXNUMBER .)
    RBRACKET        reduce using rule 70 (literal -> HEXNUMBER .)
    COLON           reduce using rule 70 (literal -> HEXNUMBER .)
    error           reduce using rule 70 (literal -> HEXNUMBER .)
    ATOM            reduce using rule 70 (literal -> HEXNUMBER .)
    COPEN           reduce using rule 70 (literal -> HEXNUMBER .)
    LIST            reduce using rule 70 (literal -> HEXNUMBER .)
    UP              reduce using rule 70 (literal -> HEXNUMBER .)
    NUMBER          reduce using rule 70 (literal -> HEXNUMBER .)
    HEXNUMBER       reduce using rule 70 (literal -> HEXNUMBER .)
    BINNUMBER       reduce using rule 70 (literal -> HEXNUMBER .)
    OCTNUMBER       reduce using rule 70 (literal -> HEXNUMBER .)
    STRING          reduce using rule 70 (literal -> HEXNUMBER .)
    TRUE            reduce using rule 70 (literal -> HEXNUMBER .)
    FALSE           reduce using rule 70 (literal -> HEXNUMBER .)
    NULL            reduce using rule 70 (literal -> HEXNUMBER .)
    LBRACE          reduce using rule 70 (literal -> HEXNUMBER .)
    PIPE            reduce using rule 70 (literal -> HEXNUMBER .)


state 43

    (76) literal -> NULL .

    EQ              reduce using rule 76 (literal -> NULL .)
    NE              reduce using rule 76 (literal -> NULL .)
    GT              reduce using rule 76 (literal -> NULL .)
    GE              reduce using rule 76 (literal -> NULL .)
    LT              reduce using rule 76 (literal -> NULL .)
    LE              reduce using rule 76 (literal -> NULL .)
    PLUS            reduce using rule 76 (literal -> NULL .)
    MINUS           reduce using rule 76 (literal -> NULL .)
    MUL             reduce using rule 76 (literal -> NULL .)
    DIV             reduce using rule 76 (literal -> NULL .)
    REGEX           reduce using rule 76 (literal -> NULL .)
    AND             reduce using rule 76 (literal -> NULL .)
    OR              reduce using rule 76 (literal -> NULL .)
    NOT             reduce using rule 76 (literal -> NULL .)
    MOD             reduce using rule 76 (literal -> NULL .)
    LBRACKET        reduce using rule 76 (literal -> NULL .)
    RPAREN          reduce using rule 76 (literal -> NULL .)
    REDIRECT        reduce using rule 76 (literal -> NULL .)
    NEWLINE         reduce using rule 76 (literal -> NULL .)
    $end            reduce using rule 76 (literal -> NULL .)
    RBRACE          reduce using rule 76 (literal -> NULL .)
    COMMA           reduce using rule 76 (literal -> NULL .)
    RBRACKET        reduce using rule 76 (literal -> NULL .)
    COLON           reduce using rule 76 (literal -> NULL .)
    error           reduce using rule 76 (literal -> NULL .)
    ATOM            reduce using rule 76 (literal -> NULL .)
    COPEN           reduce using rule 76 (literal -> NULL .)
    LIST            reduce using rule 76 (literal -> NULL .)
    UP              reduce using rule 76 (literal -> NULL .)
    NUMBER          reduce using rule 76 (literal -> NULL .)
    HEXNUMBER       reduce using rule 76 (literal -> NULL .)
    BINNUMBER       reduce using rule 76 (literal -> NULL .)
    OCTNUMBER       reduce using rule 76 (literal -> NULL .)
    STRING          reduce using rule 76 (literal -> NULL .)
    TRUE            reduce using rule 76 (literal -> NULL .)
    FALSE           reduce using rule 76 (literal -> NULL .)
    NULL            reduce using rule 76 (literal -> NULL .)
    LBRACE          reduce using rule 76 (literal -> NULL .)
    PIPE            reduce using rule 76 (literal -> NULL .)


state 44

    (72) literal -> OCTNUMBER .

    EQ              reduce using rule 72 (literal -> OCTNUMBER .)
    NE              reduce using rule 72 (literal -> OCTNUMBER .)
    GT              reduce using rule 72 (literal -> OCTNUMBER .)
    GE              reduce using rule 72 (literal -> OCTNUMBER .)
    LT              reduce using rule 72 (literal -> OCTNUMBER .)
    LE              reduce using rule 72 (literal -> OCTNUMBER .)
    PLUS            reduce using rule 72 (literal -> OCTNUMBER .)
    MINUS           reduce using rule 72 (literal -> OCTNUMBER .)
    MUL             reduce using rule 72 (literal -> OCTNUMBER .)
    DIV             reduce using rule 72 (literal -> OCTNUMBER .)
    REGEX           reduce using rule 72 (literal -> OCTNUMBER .)
    AND             reduce using rule 72 (literal -> OCTNUMBER .)
    OR              reduce using rule 72 (literal -> OCTNUMBER .)
    NOT             reduce using rule 72 (literal -> OCTNUMBER .)
    MOD             reduce using rule 72 (literal -> OCTNUMBER .)
    LBRACKET        reduce using rule 72 (literal -> OCTNUMBER .)
    RPAREN          reduce using rule 72 (literal -> OCTNUMBER .)
    REDIRECT        reduce using rule 72 (literal -> OCTNUMBER .)
    NEWLINE         reduce using rule 72 (literal -> OCTNUMBER .)
    $end            reduce using rule 72 (literal -> OCTNUMBER .)
    RBRACE          reduce using rule 72 (literal -> OCTNUMBER .)
    COMMA           reduce using rule 72 (literal -> OCTNUMBER .)
    RBRACKET        reduce using rule 72 (literal -> OCTNUMBER .)
    COLON           reduce using rule 72 (literal -> OCTNUMBER .)
    error           reduce using rule 72 (literal -> OCTNUMBER .)
    ATOM            reduce using rule 72 (literal -> OCTNUMBER .)
    COPEN           reduce using rule 72 (literal -> OCTNUMBER .)
    LIST            reduce using rule 72 (literal -> OCTNUMBER .)
    UP              reduce using rule 72 (literal -> OCTNUMBER .)
    NUMBER          reduce using rule 72 (literal -> OCTNUMBER .)
    HEXNUMBER       reduce using rule 72 (literal -> OCTNUMBER .)
    BINNUMBER       reduce using rule 72 (literal -> OCTNUMBER .)
    OCTNUMBER       reduce using rule 72 (literal -> OCTNUMBER .)
    STRING          reduce using rule 72 (literal -> OCTNUMBER .)
    TRUE            reduce using rule 72 (literal -> OCTNUMBER .)
    FALSE           reduce using rule 72 (literal -> OCTNUMBER .)
    NULL            reduce using rule 72 (literal -> OCTNUMBER .)
    LBRACE          reduce using rule 72 (literal -> OCTNUMBER .)
    PIPE            reduce using rule 72 (literal -> OCTNUMBER .)


state 45

    (54) expr -> expr_expansion .

    EQ              reduce using rule 54 (expr -> expr_expansion .)
    NE              reduce using rule 54 (expr -> expr_expansion .)
    GT              reduce using rule 54 (expr -> expr_expansion .)
    GE              reduce using rule 54 (expr -> expr_expansion .)
    LT              reduce using rule 54 (expr -> expr_expansion .)
    LE              reduce using rule 54 (expr -> expr_expansion .)
    PLUS            reduce using rule 54 (expr -> expr_expansion .)
    MINUS           reduce using rule 54 (expr -> expr_expansion .)
    MUL             reduce using rule 54 (expr -> expr_expansion .)
    DIV             reduce using rule 54 (expr -> expr_expansion .)
    REGEX           reduce using rule 54 (expr -> expr_expansion .)
    AND             reduce using rule 54 (expr -> expr_expansion .)
    OR              reduce using rule 54 (expr -> expr_expansion .)
    NOT             reduce using rule 54 (expr -> expr_expansion .)
    MOD             reduce using rule 54 (expr -> expr_expansion .)
    LBRACKET        reduce using rule 54 (expr -> expr_expansion .)
    RPAREN          reduce using rule 54 (expr -> expr_expansion .)
    REDIRECT        reduce using rule 54 (expr -> expr_expansion .)
    NEWLINE         reduce using rule 54 (expr -> expr_expansion .)
    $end            reduce using rule 54 (expr -> expr_expansion .)
    RBRACE          reduce using rule 54 (expr -> expr_expansion .)
    COMMA           reduce using rule 54 (expr -> expr_expansion .)
    RBRACKET        reduce using rule 54 (expr -> expr_expansion .)
    COLON           reduce using rule 54 (expr -> expr_expansion .)


state 46

    (47) expr -> array_literal .

    EQ              reduce using rule 47 (expr -> array_literal .)
    NE              reduce using rule 47 (expr -> array_literal .)
    GT              reduce using rule 47 (expr -> array_literal .)
    GE              reduce using rule 47 (expr -> array_literal .)
    LT              reduce using rule 47 (expr -> array_literal .)
    LE              reduce using rule 47 (expr -> array_literal .)
    PLUS            reduce using rule 47 (expr -> array_literal .)
    MINUS           reduce using rule 47 (expr -> array_literal .)
    MUL             reduce using rule 47 (expr -> array_literal .)
    DIV             reduce using rule 47 (expr -> array_literal .)
    REGEX           reduce using rule 47 (expr -> array_literal .)
    AND             reduce using rule 47 (expr -> array_literal .)
    OR              reduce using rule 47 (expr -> array_literal .)
    NOT             reduce using rule 47 (expr -> array_literal .)
    MOD             reduce using rule 47 (expr -> array_literal .)
    LBRACKET        reduce using rule 47 (expr -> array_literal .)
    RPAREN          reduce using rule 47 (expr -> array_literal .)
    REDIRECT        reduce using rule 47 (expr -> array_literal .)
    NEWLINE         reduce using rule 47 (expr -> array_literal .)
    $end            reduce using rule 47 (expr -> array_literal .)
    RBRACE          reduce using rule 47 (expr -> array_literal .)
    COMMA           reduce using rule 47 (expr -> array_literal .)
    RBRACKET        reduce using rule 47 (expr -> array_literal .)
    COLON           reduce using rule 47 (expr -> array_literal .)


state 47

    (53) expr -> anon_function_expr .

    EQ              reduce using rule 53 (expr -> anon_function_expr .)
    NE              reduce using rule 53 (expr -> anon_function_expr .)
    GT              reduce using rule 53 (expr -> anon_function_expr .)
    GE              reduce using rule 53 (expr -> anon_function_expr .)
    LT              reduce using rule 53 (expr -> anon_function_expr .)
    LE              reduce using rule 53 (expr -> anon_function_expr .)
    PLUS            reduce using rule 53 (expr -> anon_function_expr .)
    MINUS           reduce using rule 53 (expr -> anon_function_expr .)
    MUL             reduce using rule 53 (expr -> anon_function_expr .)
    DIV             reduce using rule 53 (expr -> anon_function_expr .)
    REGEX           reduce using rule 53 (expr -> anon_function_expr .)
    AND             reduce using rule 53 (expr -> anon_function_expr .)
    OR              reduce using rule 53 (expr -> anon_function_expr .)
    NOT             reduce using rule 53 (expr -> anon_function_expr .)
    MOD             reduce using rule 53 (expr -> anon_function_expr .)
    LBRACKET        reduce using rule 53 (expr -> anon_function_expr .)
    RPAREN          reduce using rule 53 (expr -> anon_function_expr .)
    REDIRECT        reduce using rule 53 (expr -> anon_function_expr .)
    NEWLINE         reduce using rule 53 (expr -> anon_function_expr .)
    $end            reduce using rule 53 (expr -> anon_function_expr .)
    RBRACE          reduce using rule 53 (expr -> anon_function_expr .)
    COMMA           reduce using rule 53 (expr -> anon_function_expr .)
    RBRACKET        reduce using rule 53 (expr -> anon_function_expr .)
    COLON           reduce using rule 53 (expr -> anon_function_expr .)


state 48

    (83) anon_function_expr -> FUNCTION . LPAREN RPAREN block
    (84) anon_function_expr -> FUNCTION . LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> FUNCTION . LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> FUNCTION . LPAREN function_argument_list RPAREN NEWLINE block

    LPAREN          shift and go to state 98


state 49

    (58) expr_expansion -> EOPEN . command RPAREN
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5
    ATOM            shift and go to state 97

    command                        shift and go to state 100
    symbol                         shift and go to state 99
    command_item                   shift and go to state 8

state 50

    (71) literal -> BINNUMBER .

    EQ              reduce using rule 71 (literal -> BINNUMBER .)
    NE              reduce using rule 71 (literal -> BINNUMBER .)
    GT              reduce using rule 71 (literal -> BINNUMBER .)
    GE              reduce using rule 71 (literal -> BINNUMBER .)
    LT              reduce using rule 71 (literal -> BINNUMBER .)
    LE              reduce using rule 71 (literal -> BINNUMBER .)
    PLUS            reduce using rule 71 (literal -> BINNUMBER .)
    MINUS           reduce using rule 71 (literal -> BINNUMBER .)
    MUL             reduce using rule 71 (literal -> BINNUMBER .)
    DIV             reduce using rule 71 (literal -> BINNUMBER .)
    REGEX           reduce using rule 71 (literal -> BINNUMBER .)
    AND             reduce using rule 71 (literal -> BINNUMBER .)
    OR              reduce using rule 71 (literal -> BINNUMBER .)
    NOT             reduce using rule 71 (literal -> BINNUMBER .)
    MOD             reduce using rule 71 (literal -> BINNUMBER .)
    LBRACKET        reduce using rule 71 (literal -> BINNUMBER .)
    RPAREN          reduce using rule 71 (literal -> BINNUMBER .)
    REDIRECT        reduce using rule 71 (literal -> BINNUMBER .)
    NEWLINE         reduce using rule 71 (literal -> BINNUMBER .)
    $end            reduce using rule 71 (literal -> BINNUMBER .)
    RBRACE          reduce using rule 71 (literal -> BINNUMBER .)
    COMMA           reduce using rule 71 (literal -> BINNUMBER .)
    RBRACKET        reduce using rule 71 (literal -> BINNUMBER .)
    COLON           reduce using rule 71 (literal -> BINNUMBER .)
    error           reduce using rule 71 (literal -> BINNUMBER .)
    ATOM            reduce using rule 71 (literal -> BINNUMBER .)
    COPEN           reduce using rule 71 (literal -> BINNUMBER .)
    LIST            reduce using rule 71 (literal -> BINNUMBER .)
    UP              reduce using rule 71 (literal -> BINNUMBER .)
    NUMBER          reduce using rule 71 (literal -> BINNUMBER .)
    HEXNUMBER       reduce using rule 71 (literal -> BINNUMBER .)
    BINNUMBER       reduce using rule 71 (literal -> BINNUMBER .)
    OCTNUMBER       reduce using rule 71 (literal -> BINNUMBER .)
    STRING          reduce using rule 71 (literal -> BINNUMBER .)
    TRUE            reduce using rule 71 (literal -> BINNUMBER .)
    FALSE           reduce using rule 71 (literal -> BINNUMBER .)
    NULL            reduce using rule 71 (literal -> BINNUMBER .)
    LBRACE          reduce using rule 71 (literal -> BINNUMBER .)
    PIPE            reduce using rule 71 (literal -> BINNUMBER .)


state 51

    (55) expr -> expr_parens .

    EQ              reduce using rule 55 (expr -> expr_parens .)
    NE              reduce using rule 55 (expr -> expr_parens .)
    GT              reduce using rule 55 (expr -> expr_parens .)
    GE              reduce using rule 55 (expr -> expr_parens .)
    LT              reduce using rule 55 (expr -> expr_parens .)
    LE              reduce using rule 55 (expr -> expr_parens .)
    PLUS            reduce using rule 55 (expr -> expr_parens .)
    MINUS           reduce using rule 55 (expr -> expr_parens .)
    MUL             reduce using rule 55 (expr -> expr_parens .)
    DIV             reduce using rule 55 (expr -> expr_parens .)
    REGEX           reduce using rule 55 (expr -> expr_parens .)
    AND             reduce using rule 55 (expr -> expr_parens .)
    OR              reduce using rule 55 (expr -> expr_parens .)
    NOT             reduce using rule 55 (expr -> expr_parens .)
    MOD             reduce using rule 55 (expr -> expr_parens .)
    LBRACKET        reduce using rule 55 (expr -> expr_parens .)
    RPAREN          reduce using rule 55 (expr -> expr_parens .)
    REDIRECT        reduce using rule 55 (expr -> expr_parens .)
    NEWLINE         reduce using rule 55 (expr -> expr_parens .)
    $end            reduce using rule 55 (expr -> expr_parens .)
    RBRACE          reduce using rule 55 (expr -> expr_parens .)
    COMMA           reduce using rule 55 (expr -> expr_parens .)
    RBRACKET        reduce using rule 55 (expr -> expr_parens .)
    COLON           reduce using rule 55 (expr -> expr_parens .)


state 52

    (56) expr -> COPEN . expr RBRACE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 101
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 53

    (48) expr -> dict_literal .

    EQ              reduce using rule 48 (expr -> dict_literal .)
    NE              reduce using rule 48 (expr -> dict_literal .)
    GT              reduce using rule 48 (expr -> dict_literal .)
    GE              reduce using rule 48 (expr -> dict_literal .)
    LT              reduce using rule 48 (expr -> dict_literal .)
    LE              reduce using rule 48 (expr -> dict_literal .)
    PLUS            reduce using rule 48 (expr -> dict_literal .)
    MINUS           reduce using rule 48 (expr -> dict_literal .)
    MUL             reduce using rule 48 (expr -> dict_literal .)
    DIV             reduce using rule 48 (expr -> dict_literal .)
    REGEX           reduce using rule 48 (expr -> dict_literal .)
    AND             reduce using rule 48 (expr -> dict_literal .)
    OR              reduce using rule 48 (expr -> dict_literal .)
    NOT             reduce using rule 48 (expr -> dict_literal .)
    MOD             reduce using rule 48 (expr -> dict_literal .)
    LBRACKET        reduce using rule 48 (expr -> dict_literal .)
    RPAREN          reduce using rule 48 (expr -> dict_literal .)
    REDIRECT        reduce using rule 48 (expr -> dict_literal .)
    NEWLINE         reduce using rule 48 (expr -> dict_literal .)
    $end            reduce using rule 48 (expr -> dict_literal .)
    RBRACE          reduce using rule 48 (expr -> dict_literal .)
    COMMA           reduce using rule 48 (expr -> dict_literal .)
    RBRACKET        reduce using rule 48 (expr -> dict_literal .)
    COLON           reduce using rule 48 (expr -> dict_literal .)


state 54

    (57) expr_parens -> LPAREN expr . RPAREN
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 118
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 55

    (59) array_literal -> LBRACKET . RBRACKET
    (60) array_literal -> LBRACKET . expr_list RBRACKET
    (43) expr_list -> . expr
    (44) expr_list -> . expr COMMA expr_list
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    RBRACKET        shift and go to state 120
    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 119
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    expr_list                      shift and go to state 121
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 56

    (74) literal -> TRUE .

    EQ              reduce using rule 74 (literal -> TRUE .)
    NE              reduce using rule 74 (literal -> TRUE .)
    GT              reduce using rule 74 (literal -> TRUE .)
    GE              reduce using rule 74 (literal -> TRUE .)
    LT              reduce using rule 74 (literal -> TRUE .)
    LE              reduce using rule 74 (literal -> TRUE .)
    PLUS            reduce using rule 74 (literal -> TRUE .)
    MINUS           reduce using rule 74 (literal -> TRUE .)
    MUL             reduce using rule 74 (literal -> TRUE .)
    DIV             reduce using rule 74 (literal -> TRUE .)
    REGEX           reduce using rule 74 (literal -> TRUE .)
    AND             reduce using rule 74 (literal -> TRUE .)
    OR              reduce using rule 74 (literal -> TRUE .)
    NOT             reduce using rule 74 (literal -> TRUE .)
    MOD             reduce using rule 74 (literal -> TRUE .)
    LBRACKET        reduce using rule 74 (literal -> TRUE .)
    RPAREN          reduce using rule 74 (literal -> TRUE .)
    REDIRECT        reduce using rule 74 (literal -> TRUE .)
    NEWLINE         reduce using rule 74 (literal -> TRUE .)
    $end            reduce using rule 74 (literal -> TRUE .)
    RBRACE          reduce using rule 74 (literal -> TRUE .)
    COMMA           reduce using rule 74 (literal -> TRUE .)
    RBRACKET        reduce using rule 74 (literal -> TRUE .)
    COLON           reduce using rule 74 (literal -> TRUE .)
    error           reduce using rule 74 (literal -> TRUE .)
    ATOM            reduce using rule 74 (literal -> TRUE .)
    COPEN           reduce using rule 74 (literal -> TRUE .)
    LIST            reduce using rule 74 (literal -> TRUE .)
    UP              reduce using rule 74 (literal -> TRUE .)
    NUMBER          reduce using rule 74 (literal -> TRUE .)
    HEXNUMBER       reduce using rule 74 (literal -> TRUE .)
    BINNUMBER       reduce using rule 74 (literal -> TRUE .)
    OCTNUMBER       reduce using rule 74 (literal -> TRUE .)
    STRING          reduce using rule 74 (literal -> TRUE .)
    TRUE            reduce using rule 74 (literal -> TRUE .)
    FALSE           reduce using rule 74 (literal -> TRUE .)
    NULL            reduce using rule 74 (literal -> TRUE .)
    LBRACE          reduce using rule 74 (literal -> TRUE .)
    PIPE            reduce using rule 74 (literal -> TRUE .)


state 57

    (49) expr -> unary_expr .

    EQ              reduce using rule 49 (expr -> unary_expr .)
    NE              reduce using rule 49 (expr -> unary_expr .)
    GT              reduce using rule 49 (expr -> unary_expr .)
    GE              reduce using rule 49 (expr -> unary_expr .)
    LT              reduce using rule 49 (expr -> unary_expr .)
    LE              reduce using rule 49 (expr -> unary_expr .)
    PLUS            reduce using rule 49 (expr -> unary_expr .)
    MINUS           reduce using rule 49 (expr -> unary_expr .)
    MUL             reduce using rule 49 (expr -> unary_expr .)
    DIV             reduce using rule 49 (expr -> unary_expr .)
    REGEX           reduce using rule 49 (expr -> unary_expr .)
    AND             reduce using rule 49 (expr -> unary_expr .)
    OR              reduce using rule 49 (expr -> unary_expr .)
    NOT             reduce using rule 49 (expr -> unary_expr .)
    MOD             reduce using rule 49 (expr -> unary_expr .)
    LBRACKET        reduce using rule 49 (expr -> unary_expr .)
    RPAREN          reduce using rule 49 (expr -> unary_expr .)
    REDIRECT        reduce using rule 49 (expr -> unary_expr .)
    NEWLINE         reduce using rule 49 (expr -> unary_expr .)
    $end            reduce using rule 49 (expr -> unary_expr .)
    RBRACE          reduce using rule 49 (expr -> unary_expr .)
    COMMA           reduce using rule 49 (expr -> unary_expr .)
    RBRACKET        reduce using rule 49 (expr -> unary_expr .)
    COLON           reduce using rule 49 (expr -> unary_expr .)


state 58

    (77) symbol -> ATOM .
    (78) call -> ATOM . LPAREN RPAREN
    (79) call -> ATOM . LPAREN expr_list RPAREN

    RPAREN          reduce using rule 77 (symbol -> ATOM .)
    EQ              reduce using rule 77 (symbol -> ATOM .)
    NE              reduce using rule 77 (symbol -> ATOM .)
    GT              reduce using rule 77 (symbol -> ATOM .)
    GE              reduce using rule 77 (symbol -> ATOM .)
    LT              reduce using rule 77 (symbol -> ATOM .)
    LE              reduce using rule 77 (symbol -> ATOM .)
    PLUS            reduce using rule 77 (symbol -> ATOM .)
    MINUS           reduce using rule 77 (symbol -> ATOM .)
    MUL             reduce using rule 77 (symbol -> ATOM .)
    DIV             reduce using rule 77 (symbol -> ATOM .)
    REGEX           reduce using rule 77 (symbol -> ATOM .)
    AND             reduce using rule 77 (symbol -> ATOM .)
    OR              reduce using rule 77 (symbol -> ATOM .)
    NOT             reduce using rule 77 (symbol -> ATOM .)
    MOD             reduce using rule 77 (symbol -> ATOM .)
    LBRACKET        reduce using rule 77 (symbol -> ATOM .)
    RBRACKET        reduce using rule 77 (symbol -> ATOM .)
    REDIRECT        reduce using rule 77 (symbol -> ATOM .)
    NEWLINE         reduce using rule 77 (symbol -> ATOM .)
    $end            reduce using rule 77 (symbol -> ATOM .)
    RBRACE          reduce using rule 77 (symbol -> ATOM .)
    COMMA           reduce using rule 77 (symbol -> ATOM .)
    COLON           reduce using rule 77 (symbol -> ATOM .)
    LPAREN          shift and go to state 92


state 59

    (50) expr -> binary_expr .

    EQ              reduce using rule 50 (expr -> binary_expr .)
    NE              reduce using rule 50 (expr -> binary_expr .)
    GT              reduce using rule 50 (expr -> binary_expr .)
    GE              reduce using rule 50 (expr -> binary_expr .)
    LT              reduce using rule 50 (expr -> binary_expr .)
    LE              reduce using rule 50 (expr -> binary_expr .)
    PLUS            reduce using rule 50 (expr -> binary_expr .)
    MINUS           reduce using rule 50 (expr -> binary_expr .)
    MUL             reduce using rule 50 (expr -> binary_expr .)
    DIV             reduce using rule 50 (expr -> binary_expr .)
    REGEX           reduce using rule 50 (expr -> binary_expr .)
    AND             reduce using rule 50 (expr -> binary_expr .)
    OR              reduce using rule 50 (expr -> binary_expr .)
    NOT             reduce using rule 50 (expr -> binary_expr .)
    MOD             reduce using rule 50 (expr -> binary_expr .)
    LBRACKET        reduce using rule 50 (expr -> binary_expr .)
    RPAREN          reduce using rule 50 (expr -> binary_expr .)
    REDIRECT        reduce using rule 50 (expr -> binary_expr .)
    NEWLINE         reduce using rule 50 (expr -> binary_expr .)
    $end            reduce using rule 50 (expr -> binary_expr .)
    RBRACE          reduce using rule 50 (expr -> binary_expr .)
    COMMA           reduce using rule 50 (expr -> binary_expr .)
    RBRACKET        reduce using rule 50 (expr -> binary_expr .)
    COLON           reduce using rule 50 (expr -> binary_expr .)


state 60

    (46) expr -> literal .

    EQ              reduce using rule 46 (expr -> literal .)
    NE              reduce using rule 46 (expr -> literal .)
    GT              reduce using rule 46 (expr -> literal .)
    GE              reduce using rule 46 (expr -> literal .)
    LT              reduce using rule 46 (expr -> literal .)
    LE              reduce using rule 46 (expr -> literal .)
    PLUS            reduce using rule 46 (expr -> literal .)
    MINUS           reduce using rule 46 (expr -> literal .)
    MUL             reduce using rule 46 (expr -> literal .)
    DIV             reduce using rule 46 (expr -> literal .)
    REGEX           reduce using rule 46 (expr -> literal .)
    AND             reduce using rule 46 (expr -> literal .)
    OR              reduce using rule 46 (expr -> literal .)
    NOT             reduce using rule 46 (expr -> literal .)
    MOD             reduce using rule 46 (expr -> literal .)
    LBRACKET        reduce using rule 46 (expr -> literal .)
    RPAREN          reduce using rule 46 (expr -> literal .)
    REDIRECT        reduce using rule 46 (expr -> literal .)
    NEWLINE         reduce using rule 46 (expr -> literal .)
    $end            reduce using rule 46 (expr -> literal .)
    RBRACE          reduce using rule 46 (expr -> literal .)
    COMMA           reduce using rule 46 (expr -> literal .)
    RBRACKET        reduce using rule 46 (expr -> literal .)
    COLON           reduce using rule 46 (expr -> literal .)


state 61

    (52) expr -> subscript_expr .

    EQ              reduce using rule 52 (expr -> subscript_expr .)
    NE              reduce using rule 52 (expr -> subscript_expr .)
    GT              reduce using rule 52 (expr -> subscript_expr .)
    GE              reduce using rule 52 (expr -> subscript_expr .)
    LT              reduce using rule 52 (expr -> subscript_expr .)
    LE              reduce using rule 52 (expr -> subscript_expr .)
    PLUS            reduce using rule 52 (expr -> subscript_expr .)
    MINUS           reduce using rule 52 (expr -> subscript_expr .)
    MUL             reduce using rule 52 (expr -> subscript_expr .)
    DIV             reduce using rule 52 (expr -> subscript_expr .)
    REGEX           reduce using rule 52 (expr -> subscript_expr .)
    AND             reduce using rule 52 (expr -> subscript_expr .)
    OR              reduce using rule 52 (expr -> subscript_expr .)
    NOT             reduce using rule 52 (expr -> subscript_expr .)
    MOD             reduce using rule 52 (expr -> subscript_expr .)
    LBRACKET        reduce using rule 52 (expr -> subscript_expr .)
    RPAREN          reduce using rule 52 (expr -> subscript_expr .)
    REDIRECT        reduce using rule 52 (expr -> subscript_expr .)
    NEWLINE         reduce using rule 52 (expr -> subscript_expr .)
    $end            reduce using rule 52 (expr -> subscript_expr .)
    RBRACE          reduce using rule 52 (expr -> subscript_expr .)
    COMMA           reduce using rule 52 (expr -> subscript_expr .)
    RBRACKET        reduce using rule 52 (expr -> subscript_expr .)
    COLON           reduce using rule 52 (expr -> subscript_expr .)


state 62

    (45) expr -> symbol .

    EQ              reduce using rule 45 (expr -> symbol .)
    NE              reduce using rule 45 (expr -> symbol .)
    GT              reduce using rule 45 (expr -> symbol .)
    GE              reduce using rule 45 (expr -> symbol .)
    LT              reduce using rule 45 (expr -> symbol .)
    LE              reduce using rule 45 (expr -> symbol .)
    PLUS            reduce using rule 45 (expr -> symbol .)
    MINUS           reduce using rule 45 (expr -> symbol .)
    MUL             reduce using rule 45 (expr -> symbol .)
    DIV             reduce using rule 45 (expr -> symbol .)
    REGEX           reduce using rule 45 (expr -> symbol .)
    AND             reduce using rule 45 (expr -> symbol .)
    OR              reduce using rule 45 (expr -> symbol .)
    NOT             reduce using rule 45 (expr -> symbol .)
    MOD             reduce using rule 45 (expr -> symbol .)
    LBRACKET        reduce using rule 45 (expr -> symbol .)
    RPAREN          reduce using rule 45 (expr -> symbol .)
    REDIRECT        reduce using rule 45 (expr -> symbol .)
    NEWLINE         reduce using rule 45 (expr -> symbol .)
    $end            reduce using rule 45 (expr -> symbol .)
    RBRACE          reduce using rule 45 (expr -> symbol .)
    COMMA           reduce using rule 45 (expr -> symbol .)
    RBRACKET        reduce using rule 45 (expr -> symbol .)
    COLON           reduce using rule 45 (expr -> symbol .)


state 63

    (87) unary_expr -> MINUS . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 122
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 64

    (61) dict_literal -> LBRACE . RBRACE
    (62) dict_literal -> LBRACE . NEWLINE RBRACE
    (63) dict_literal -> LBRACE . dict_pair_list RBRACE
    (64) dict_pair_list -> . dict_pair
    (65) dict_pair_list -> . dict_pair COMMA dict_pair_list
    (66) dict_pair -> . expr COLON expr
    (67) dict_pair -> . NEWLINE expr COLON expr
    (68) dict_pair -> . NEWLINE expr COLON expr NEWLINE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    RBRACE          shift and go to state 127
    NEWLINE         shift and go to state 123
    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 126
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    subscript_expr                 shift and go to state 61
    dict_pair_list                 shift and go to state 125
    anon_function_expr             shift and go to state 47
    dict_pair                      shift and go to state 124
    unary_expr                     shift and go to state 57
    symbol                         shift and go to state 62
    binary_expr                    shift and go to state 59
    array_literal                  shift and go to state 46
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 65

    (88) unary_expr -> NOT . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 128
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 66

    (116) parameter -> set_parameter .

    error           reduce using rule 116 (parameter -> set_parameter .)
    ATOM            reduce using rule 116 (parameter -> set_parameter .)
    COPEN           reduce using rule 116 (parameter -> set_parameter .)
    LIST            reduce using rule 116 (parameter -> set_parameter .)
    UP              reduce using rule 116 (parameter -> set_parameter .)
    NUMBER          reduce using rule 116 (parameter -> set_parameter .)
    HEXNUMBER       reduce using rule 116 (parameter -> set_parameter .)
    BINNUMBER       reduce using rule 116 (parameter -> set_parameter .)
    OCTNUMBER       reduce using rule 116 (parameter -> set_parameter .)
    STRING          reduce using rule 116 (parameter -> set_parameter .)
    TRUE            reduce using rule 116 (parameter -> set_parameter .)
    FALSE           reduce using rule 116 (parameter -> set_parameter .)
    NULL            reduce using rule 116 (parameter -> set_parameter .)
    LBRACKET        reduce using rule 116 (parameter -> set_parameter .)
    LBRACE          reduce using rule 116 (parameter -> set_parameter .)
    PIPE            reduce using rule 116 (parameter -> set_parameter .)
    REDIRECT        reduce using rule 116 (parameter -> set_parameter .)
    NEWLINE         reduce using rule 116 (parameter -> set_parameter .)
    $end            reduce using rule 116 (parameter -> set_parameter .)
    RBRACE          reduce using rule 116 (parameter -> set_parameter .)
    RPAREN          reduce using rule 116 (parameter -> set_parameter .)


state 67

    (106) command -> command_item PIPE . command
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5
    ATOM            shift and go to state 97

    command                        shift and go to state 129
    symbol                         shift and go to state 99
    command_item                   shift and go to state 8

state 68

    (124) unary_parameter -> array_literal .

    COMMA           reduce using rule 124 (unary_parameter -> array_literal .)
    error           reduce using rule 124 (unary_parameter -> array_literal .)
    ATOM            reduce using rule 124 (unary_parameter -> array_literal .)
    COPEN           reduce using rule 124 (unary_parameter -> array_literal .)
    LIST            reduce using rule 124 (unary_parameter -> array_literal .)
    UP              reduce using rule 124 (unary_parameter -> array_literal .)
    NUMBER          reduce using rule 124 (unary_parameter -> array_literal .)
    HEXNUMBER       reduce using rule 124 (unary_parameter -> array_literal .)
    BINNUMBER       reduce using rule 124 (unary_parameter -> array_literal .)
    OCTNUMBER       reduce using rule 124 (unary_parameter -> array_literal .)
    STRING          reduce using rule 124 (unary_parameter -> array_literal .)
    TRUE            reduce using rule 124 (unary_parameter -> array_literal .)
    FALSE           reduce using rule 124 (unary_parameter -> array_literal .)
    NULL            reduce using rule 124 (unary_parameter -> array_literal .)
    LBRACKET        reduce using rule 124 (unary_parameter -> array_literal .)
    LBRACE          reduce using rule 124 (unary_parameter -> array_literal .)
    PIPE            reduce using rule 124 (unary_parameter -> array_literal .)
    REDIRECT        reduce using rule 124 (unary_parameter -> array_literal .)
    NEWLINE         reduce using rule 124 (unary_parameter -> array_literal .)
    $end            reduce using rule 124 (unary_parameter -> array_literal .)
    RBRACE          reduce using rule 124 (unary_parameter -> array_literal .)
    RPAREN          reduce using rule 124 (unary_parameter -> array_literal .)


state 69

    (128) unary_parameter -> UP .

    COMMA           reduce using rule 128 (unary_parameter -> UP .)
    error           reduce using rule 128 (unary_parameter -> UP .)
    ATOM            reduce using rule 128 (unary_parameter -> UP .)
    COPEN           reduce using rule 128 (unary_parameter -> UP .)
    LIST            reduce using rule 128 (unary_parameter -> UP .)
    UP              reduce using rule 128 (unary_parameter -> UP .)
    NUMBER          reduce using rule 128 (unary_parameter -> UP .)
    HEXNUMBER       reduce using rule 128 (unary_parameter -> UP .)
    BINNUMBER       reduce using rule 128 (unary_parameter -> UP .)
    OCTNUMBER       reduce using rule 128 (unary_parameter -> UP .)
    STRING          reduce using rule 128 (unary_parameter -> UP .)
    TRUE            reduce using rule 128 (unary_parameter -> UP .)
    FALSE           reduce using rule 128 (unary_parameter -> UP .)
    NULL            reduce using rule 128 (unary_parameter -> UP .)
    LBRACKET        reduce using rule 128 (unary_parameter -> UP .)
    LBRACE          reduce using rule 128 (unary_parameter -> UP .)
    PIPE            reduce using rule 128 (unary_parameter -> UP .)
    REDIRECT        reduce using rule 128 (unary_parameter -> UP .)
    NEWLINE         reduce using rule 128 (unary_parameter -> UP .)
    $end            reduce using rule 128 (unary_parameter -> UP .)
    RBRACE          reduce using rule 128 (unary_parameter -> UP .)
    RPAREN          reduce using rule 128 (unary_parameter -> UP .)


state 70

    (123) unary_parameter -> literal .

    COMMA           reduce using rule 123 (unary_parameter -> literal .)
    error           reduce using rule 123 (unary_parameter -> literal .)
    ATOM            reduce using rule 123 (unary_parameter -> literal .)
    COPEN           reduce using rule 123 (unary_parameter -> literal .)
    LIST            reduce using rule 123 (unary_parameter -> literal .)
    UP              reduce using rule 123 (unary_parameter -> literal .)
    NUMBER          reduce using rule 123 (unary_parameter -> literal .)
    HEXNUMBER       reduce using rule 123 (unary_parameter -> literal .)
    BINNUMBER       reduce using rule 123 (unary_parameter -> literal .)
    OCTNUMBER       reduce using rule 123 (unary_parameter -> literal .)
    STRING          reduce using rule 123 (unary_parameter -> literal .)
    TRUE            reduce using rule 123 (unary_parameter -> literal .)
    FALSE           reduce using rule 123 (unary_parameter -> literal .)
    NULL            reduce using rule 123 (unary_parameter -> literal .)
    LBRACKET        reduce using rule 123 (unary_parameter -> literal .)
    LBRACE          reduce using rule 123 (unary_parameter -> literal .)
    PIPE            reduce using rule 123 (unary_parameter -> literal .)
    REDIRECT        reduce using rule 123 (unary_parameter -> literal .)
    NEWLINE         reduce using rule 123 (unary_parameter -> literal .)
    $end            reduce using rule 123 (unary_parameter -> literal .)
    RBRACE          reduce using rule 123 (unary_parameter -> literal .)
    RPAREN          reduce using rule 123 (unary_parameter -> literal .)


state 71

    (126) unary_parameter -> COPEN . expr RBRACE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 130
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 72

    (125) unary_parameter -> dict_literal .

    COMMA           reduce using rule 125 (unary_parameter -> dict_literal .)
    error           reduce using rule 125 (unary_parameter -> dict_literal .)
    ATOM            reduce using rule 125 (unary_parameter -> dict_literal .)
    COPEN           reduce using rule 125 (unary_parameter -> dict_literal .)
    LIST            reduce using rule 125 (unary_parameter -> dict_literal .)
    UP              reduce using rule 125 (unary_parameter -> dict_literal .)
    NUMBER          reduce using rule 125 (unary_parameter -> dict_literal .)
    HEXNUMBER       reduce using rule 125 (unary_parameter -> dict_literal .)
    BINNUMBER       reduce using rule 125 (unary_parameter -> dict_literal .)
    OCTNUMBER       reduce using rule 125 (unary_parameter -> dict_literal .)
    STRING          reduce using rule 125 (unary_parameter -> dict_literal .)
    TRUE            reduce using rule 125 (unary_parameter -> dict_literal .)
    FALSE           reduce using rule 125 (unary_parameter -> dict_literal .)
    NULL            reduce using rule 125 (unary_parameter -> dict_literal .)
    LBRACKET        reduce using rule 125 (unary_parameter -> dict_literal .)
    LBRACE          reduce using rule 125 (unary_parameter -> dict_literal .)
    PIPE            reduce using rule 125 (unary_parameter -> dict_literal .)
    REDIRECT        reduce using rule 125 (unary_parameter -> dict_literal .)
    NEWLINE         reduce using rule 125 (unary_parameter -> dict_literal .)
    $end            reduce using rule 125 (unary_parameter -> dict_literal .)
    RBRACE          reduce using rule 125 (unary_parameter -> dict_literal .)
    RPAREN          reduce using rule 125 (unary_parameter -> dict_literal .)


state 73

    (118) parameter -> error .

    error           reduce using rule 118 (parameter -> error .)
    ATOM            reduce using rule 118 (parameter -> error .)
    COPEN           reduce using rule 118 (parameter -> error .)
    LIST            reduce using rule 118 (parameter -> error .)
    UP              reduce using rule 118 (parameter -> error .)
    NUMBER          reduce using rule 118 (parameter -> error .)
    HEXNUMBER       reduce using rule 118 (parameter -> error .)
    BINNUMBER       reduce using rule 118 (parameter -> error .)
    OCTNUMBER       reduce using rule 118 (parameter -> error .)
    STRING          reduce using rule 118 (parameter -> error .)
    TRUE            reduce using rule 118 (parameter -> error .)
    FALSE           reduce using rule 118 (parameter -> error .)
    NULL            reduce using rule 118 (parameter -> error .)
    LBRACKET        reduce using rule 118 (parameter -> error .)
    LBRACE          reduce using rule 118 (parameter -> error .)
    PIPE            reduce using rule 118 (parameter -> error .)
    REDIRECT        reduce using rule 118 (parameter -> error .)
    NEWLINE         reduce using rule 118 (parameter -> error .)
    $end            reduce using rule 118 (parameter -> error .)
    RBRACE          reduce using rule 118 (parameter -> error .)
    RPAREN          reduce using rule 118 (parameter -> error .)


state 74

    (129) binary_parameter -> ATOM . ASSIGN parameter
    (130) binary_parameter -> ATOM . EQ parameter
    (131) binary_parameter -> ATOM . NE parameter
    (132) binary_parameter -> ATOM . GT parameter
    (133) binary_parameter -> ATOM . GE parameter
    (134) binary_parameter -> ATOM . LT parameter
    (135) binary_parameter -> ATOM . LE parameter
    (136) binary_parameter -> ATOM . REGEX parameter
    (137) binary_parameter -> ATOM . INC parameter
    (138) binary_parameter -> ATOM . DEC parameter
    (77) symbol -> ATOM .

    ASSIGN          shift and go to state 139
    EQ              shift and go to state 138
    NE              shift and go to state 133
    GT              shift and go to state 132
    GE              shift and go to state 137
    LT              shift and go to state 140
    LE              shift and go to state 135
    REGEX           shift and go to state 136
    INC             shift and go to state 134
    DEC             shift and go to state 131
    COMMA           reduce using rule 77 (symbol -> ATOM .)
    error           reduce using rule 77 (symbol -> ATOM .)
    ATOM            reduce using rule 77 (symbol -> ATOM .)
    COPEN           reduce using rule 77 (symbol -> ATOM .)
    LIST            reduce using rule 77 (symbol -> ATOM .)
    UP              reduce using rule 77 (symbol -> ATOM .)
    NUMBER          reduce using rule 77 (symbol -> ATOM .)
    HEXNUMBER       reduce using rule 77 (symbol -> ATOM .)
    BINNUMBER       reduce using rule 77 (symbol -> ATOM .)
    OCTNUMBER       reduce using rule 77 (symbol -> ATOM .)
    STRING          reduce using rule 77 (symbol -> ATOM .)
    TRUE            reduce using rule 77 (symbol -> ATOM .)
    FALSE           reduce using rule 77 (symbol -> ATOM .)
    NULL            reduce using rule 77 (symbol -> ATOM .)
    LBRACKET        reduce using rule 77 (symbol -> ATOM .)
    LBRACE          reduce using rule 77 (symbol -> ATOM .)
    PIPE            reduce using rule 77 (symbol -> ATOM .)
    REDIRECT        reduce using rule 77 (symbol -> ATOM .)
    NEWLINE         reduce using rule 77 (symbol -> ATOM .)
    $end            reduce using rule 77 (symbol -> ATOM .)
    RBRACE          reduce using rule 77 (symbol -> ATOM .)
    RPAREN          reduce using rule 77 (symbol -> ATOM .)


state 75

    (117) parameter -> binary_parameter .

    error           reduce using rule 117 (parameter -> binary_parameter .)
    ATOM            reduce using rule 117 (parameter -> binary_parameter .)
    COPEN           reduce using rule 117 (parameter -> binary_parameter .)
    LIST            reduce using rule 117 (parameter -> binary_parameter .)
    UP              reduce using rule 117 (parameter -> binary_parameter .)
    NUMBER          reduce using rule 117 (parameter -> binary_parameter .)
    HEXNUMBER       reduce using rule 117 (parameter -> binary_parameter .)
    BINNUMBER       reduce using rule 117 (parameter -> binary_parameter .)
    OCTNUMBER       reduce using rule 117 (parameter -> binary_parameter .)
    STRING          reduce using rule 117 (parameter -> binary_parameter .)
    TRUE            reduce using rule 117 (parameter -> binary_parameter .)
    FALSE           reduce using rule 117 (parameter -> binary_parameter .)
    NULL            reduce using rule 117 (parameter -> binary_parameter .)
    LBRACKET        reduce using rule 117 (parameter -> binary_parameter .)
    LBRACE          reduce using rule 117 (parameter -> binary_parameter .)
    PIPE            reduce using rule 117 (parameter -> binary_parameter .)
    REDIRECT        reduce using rule 117 (parameter -> binary_parameter .)
    NEWLINE         reduce using rule 117 (parameter -> binary_parameter .)
    $end            reduce using rule 117 (parameter -> binary_parameter .)
    RBRACE          reduce using rule 117 (parameter -> binary_parameter .)
    RPAREN          reduce using rule 117 (parameter -> binary_parameter .)


state 76

    (114) parameter_list -> parameter .
    (115) parameter_list -> parameter . parameter_list
    (114) parameter_list -> . parameter
    (115) parameter_list -> . parameter parameter_list
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    REDIRECT        reduce using rule 114 (parameter_list -> parameter .)
    NEWLINE         reduce using rule 114 (parameter_list -> parameter .)
    $end            reduce using rule 114 (parameter_list -> parameter .)
    RBRACE          reduce using rule 114 (parameter_list -> parameter .)
    PIPE            reduce using rule 114 (parameter_list -> parameter .)
    RPAREN          reduce using rule 114 (parameter_list -> parameter .)
    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 76
    symbol                         shift and go to state 77
    parameter_list                 shift and go to state 141
    set_parameter                  shift and go to state 66
    dict_literal                   shift and go to state 72
    binary_parameter               shift and go to state 75
    unary_parameter                shift and go to state 80
    array_literal                  shift and go to state 68
    literal                        shift and go to state 70

state 77

    (122) unary_parameter -> symbol .

    COMMA           reduce using rule 122 (unary_parameter -> symbol .)
    error           reduce using rule 122 (unary_parameter -> symbol .)
    ATOM            reduce using rule 122 (unary_parameter -> symbol .)
    COPEN           reduce using rule 122 (unary_parameter -> symbol .)
    LIST            reduce using rule 122 (unary_parameter -> symbol .)
    UP              reduce using rule 122 (unary_parameter -> symbol .)
    NUMBER          reduce using rule 122 (unary_parameter -> symbol .)
    HEXNUMBER       reduce using rule 122 (unary_parameter -> symbol .)
    BINNUMBER       reduce using rule 122 (unary_parameter -> symbol .)
    OCTNUMBER       reduce using rule 122 (unary_parameter -> symbol .)
    STRING          reduce using rule 122 (unary_parameter -> symbol .)
    TRUE            reduce using rule 122 (unary_parameter -> symbol .)
    FALSE           reduce using rule 122 (unary_parameter -> symbol .)
    NULL            reduce using rule 122 (unary_parameter -> symbol .)
    LBRACKET        reduce using rule 122 (unary_parameter -> symbol .)
    LBRACE          reduce using rule 122 (unary_parameter -> symbol .)
    PIPE            reduce using rule 122 (unary_parameter -> symbol .)
    REDIRECT        reduce using rule 122 (unary_parameter -> symbol .)
    NEWLINE         reduce using rule 122 (unary_parameter -> symbol .)
    $end            reduce using rule 122 (unary_parameter -> symbol .)
    RBRACE          reduce using rule 122 (unary_parameter -> symbol .)
    RPAREN          reduce using rule 122 (unary_parameter -> symbol .)


state 78

    (105) command -> command_item parameter_list .
    (107) command -> command_item parameter_list . PIPE command

    REDIRECT        reduce using rule 105 (command -> command_item parameter_list .)
    NEWLINE         reduce using rule 105 (command -> command_item parameter_list .)
    RBRACE          reduce using rule 105 (command -> command_item parameter_list .)
    $end            reduce using rule 105 (command -> command_item parameter_list .)
    RPAREN          reduce using rule 105 (command -> command_item parameter_list .)
    PIPE            shift and go to state 142


state 79

    (127) unary_parameter -> LIST .

    COMMA           reduce using rule 127 (unary_parameter -> LIST .)
    error           reduce using rule 127 (unary_parameter -> LIST .)
    ATOM            reduce using rule 127 (unary_parameter -> LIST .)
    COPEN           reduce using rule 127 (unary_parameter -> LIST .)
    LIST            reduce using rule 127 (unary_parameter -> LIST .)
    UP              reduce using rule 127 (unary_parameter -> LIST .)
    NUMBER          reduce using rule 127 (unary_parameter -> LIST .)
    HEXNUMBER       reduce using rule 127 (unary_parameter -> LIST .)
    BINNUMBER       reduce using rule 127 (unary_parameter -> LIST .)
    OCTNUMBER       reduce using rule 127 (unary_parameter -> LIST .)
    STRING          reduce using rule 127 (unary_parameter -> LIST .)
    TRUE            reduce using rule 127 (unary_parameter -> LIST .)
    FALSE           reduce using rule 127 (unary_parameter -> LIST .)
    NULL            reduce using rule 127 (unary_parameter -> LIST .)
    LBRACKET        reduce using rule 127 (unary_parameter -> LIST .)
    LBRACE          reduce using rule 127 (unary_parameter -> LIST .)
    PIPE            reduce using rule 127 (unary_parameter -> LIST .)
    REDIRECT        reduce using rule 127 (unary_parameter -> LIST .)
    NEWLINE         reduce using rule 127 (unary_parameter -> LIST .)
    $end            reduce using rule 127 (unary_parameter -> LIST .)
    RBRACE          reduce using rule 127 (unary_parameter -> LIST .)
    RPAREN          reduce using rule 127 (unary_parameter -> LIST .)


state 80

    (119) set_parameter -> unary_parameter .
    (120) set_parameter -> unary_parameter . COMMA set_parameter
    (121) set_parameter -> unary_parameter . COMMA error

    error           reduce using rule 119 (set_parameter -> unary_parameter .)
    ATOM            reduce using rule 119 (set_parameter -> unary_parameter .)
    COPEN           reduce using rule 119 (set_parameter -> unary_parameter .)
    LIST            reduce using rule 119 (set_parameter -> unary_parameter .)
    UP              reduce using rule 119 (set_parameter -> unary_parameter .)
    NUMBER          reduce using rule 119 (set_parameter -> unary_parameter .)
    HEXNUMBER       reduce using rule 119 (set_parameter -> unary_parameter .)
    BINNUMBER       reduce using rule 119 (set_parameter -> unary_parameter .)
    OCTNUMBER       reduce using rule 119 (set_parameter -> unary_parameter .)
    STRING          reduce using rule 119 (set_parameter -> unary_parameter .)
    TRUE            reduce using rule 119 (set_parameter -> unary_parameter .)
    FALSE           reduce using rule 119 (set_parameter -> unary_parameter .)
    NULL            reduce using rule 119 (set_parameter -> unary_parameter .)
    LBRACKET        reduce using rule 119 (set_parameter -> unary_parameter .)
    LBRACE          reduce using rule 119 (set_parameter -> unary_parameter .)
    PIPE            reduce using rule 119 (set_parameter -> unary_parameter .)
    REDIRECT        reduce using rule 119 (set_parameter -> unary_parameter .)
    NEWLINE         reduce using rule 119 (set_parameter -> unary_parameter .)
    $end            reduce using rule 119 (set_parameter -> unary_parameter .)
    RBRACE          reduce using rule 119 (set_parameter -> unary_parameter .)
    RPAREN          reduce using rule 119 (set_parameter -> unary_parameter .)
    COMMA           shift and go to state 143


state 81

    (80) subscript_left -> subscript_left LBRACKET . expr RBRACKET
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr                           shift and go to state 144
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 82

    (31) assignment_stmt -> subscript_left ASSIGN . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr                           shift and go to state 145
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 83

    (40) return_stmt -> RETURN expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 40 (return_stmt -> RETURN expr .)
    NEWLINE         reduce using rule 40 (return_stmt -> RETURN expr .)
    $end            reduce using rule 40 (return_stmt -> RETURN expr .)
    RBRACE          reduce using rule 40 (return_stmt -> RETURN expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 84

    (2) stmt_list -> stmt_redirect NEWLINE .
    (3) stmt_list -> stmt_redirect NEWLINE . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . const_stmt
    (17) stmt -> . command
    (18) stmt -> . call
    (19) stmt -> . expr_parens
    (20) stmt -> . shell
    (25) if_stmt -> . IF LPAREN expr RPAREN block
    (26) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (27) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (28) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (29) while_stmt -> . WHILE LPAREN expr RPAREN block
    (30) assignment_stmt -> . ATOM ASSIGN expr
    (31) assignment_stmt -> . subscript_left ASSIGN expr
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (34) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (39) return_stmt -> . RETURN
    (40) return_stmt -> . RETURN expr
    (41) break_stmt -> . BREAK
    (42) undef_stmt -> . UNDEF ATOM
    (32) const_stmt -> . CONST symbol ASSIGN expr
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN
    (139) shell -> . SHELL
    (140) shell -> . SHELL parameter_list
    (80) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (81) subscript_left -> . symbol LBRACKET expr RBRACKET
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    RBRACE          reduce using rule 2 (stmt_list -> stmt_redirect NEWLINE .)
    $end            reduce using rule 2 (stmt_list -> stmt_redirect NEWLINE .)
    NEWLINE         shift and go to state 1
    IF              shift and go to state 16
    FOR             shift and go to state 19
    WHILE           shift and go to state 32
    ATOM            shift and go to state 31
    FUNCTION        shift and go to state 15
    RETURN          shift and go to state 12
    BREAK           shift and go to state 35
    UNDEF           shift and go to state 30
    CONST           shift and go to state 34
    LPAREN          shift and go to state 3
    SHELL           shift and go to state 22
    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5

    return_stmt                    shift and go to state 2
    while_stmt                     shift and go to state 4
    call                           shift and go to state 6
    subscript_left                 shift and go to state 9
    stmt                           shift and go to state 26
    command                        shift and go to state 28
    shell                          shift and go to state 20
    stmt_list                      shift and go to state 146
    command_item                   shift and go to state 8
    if_stmt                        shift and go to state 25
    const_stmt                     shift and go to state 10
    symbol                         shift and go to state 33
    assignment_stmt                shift and go to state 13
    stmt_redirect                  shift and go to state 14
    function_definition_stmt       shift and go to state 11
    break_stmt                     shift and go to state 7
    for_stmt                       shift and go to state 18
    undef_stmt                     shift and go to state 29
    expr_parens                    shift and go to state 21

state 85

    (33) function_definition_stmt -> FUNCTION ATOM . LPAREN RPAREN block
    (34) function_definition_stmt -> FUNCTION ATOM . LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> FUNCTION ATOM . LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> FUNCTION ATOM . LPAREN function_argument_list RPAREN NEWLINE block

    LPAREN          shift and go to state 147


state 86

    (25) if_stmt -> IF LPAREN . expr RPAREN block
    (26) if_stmt -> IF LPAREN . expr RPAREN block ELSE block
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 148
    dict_literal                   shift and go to state 53
    symbol                         shift and go to state 62
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    binary_expr                    shift and go to state 59
    call                           shift and go to state 41
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 87

    (27) for_stmt -> FOR LPAREN . ATOM IN expr RPAREN block
    (28) for_stmt -> FOR LPAREN . ATOM COMMA ATOM IN expr RPAREN block

    ATOM            shift and go to state 149


state 88

    (140) shell -> SHELL parameter_list .

    REDIRECT        reduce using rule 140 (shell -> SHELL parameter_list .)
    NEWLINE         reduce using rule 140 (shell -> SHELL parameter_list .)
    RBRACE          reduce using rule 140 (shell -> SHELL parameter_list .)
    $end            reduce using rule 140 (shell -> SHELL parameter_list .)


state 89

    (112) command_item -> COPEN expr . RBRACE
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          shift and go to state 150
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 90

    (6) stmt_redirect -> stmt REDIRECT . ATOM
    (7) stmt_redirect -> stmt REDIRECT . STRING

    ATOM            shift and go to state 152
    STRING          shift and go to state 151


state 91

    (42) undef_stmt -> UNDEF ATOM .

    REDIRECT        reduce using rule 42 (undef_stmt -> UNDEF ATOM .)
    NEWLINE         reduce using rule 42 (undef_stmt -> UNDEF ATOM .)
    $end            reduce using rule 42 (undef_stmt -> UNDEF ATOM .)
    RBRACE          reduce using rule 42 (undef_stmt -> UNDEF ATOM .)


state 92

    (78) call -> ATOM LPAREN . RPAREN
    (79) call -> ATOM LPAREN . expr_list RPAREN
    (43) expr_list -> . expr
    (44) expr_list -> . expr COMMA expr_list
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    RPAREN          shift and go to state 153
    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 119
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    expr_list                      shift and go to state 154
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 93

    (30) assignment_stmt -> ATOM ASSIGN . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 155
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 94

    (29) while_stmt -> WHILE LPAREN . expr RPAREN block
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 156
    dict_literal                   shift and go to state 53
    symbol                         shift and go to state 62
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    binary_expr                    shift and go to state 59
    call                           shift and go to state 41
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 95

    (81) subscript_left -> symbol LBRACKET . expr RBRACKET
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 157
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 96

    (32) const_stmt -> CONST symbol . ASSIGN expr

    ASSIGN          shift and go to state 158


state 97

    (77) symbol -> ATOM .

    COMMA           reduce using rule 77 (symbol -> ATOM .)
    error           reduce using rule 77 (symbol -> ATOM .)
    ATOM            reduce using rule 77 (symbol -> ATOM .)
    COPEN           reduce using rule 77 (symbol -> ATOM .)
    LIST            reduce using rule 77 (symbol -> ATOM .)
    UP              reduce using rule 77 (symbol -> ATOM .)
    NUMBER          reduce using rule 77 (symbol -> ATOM .)
    HEXNUMBER       reduce using rule 77 (symbol -> ATOM .)
    BINNUMBER       reduce using rule 77 (symbol -> ATOM .)
    OCTNUMBER       reduce using rule 77 (symbol -> ATOM .)
    STRING          reduce using rule 77 (symbol -> ATOM .)
    TRUE            reduce using rule 77 (symbol -> ATOM .)
    FALSE           reduce using rule 77 (symbol -> ATOM .)
    NULL            reduce using rule 77 (symbol -> ATOM .)
    LBRACKET        reduce using rule 77 (symbol -> ATOM .)
    LBRACE          reduce using rule 77 (symbol -> ATOM .)
    PIPE            reduce using rule 77 (symbol -> ATOM .)
    REDIRECT        reduce using rule 77 (symbol -> ATOM .)
    NEWLINE         reduce using rule 77 (symbol -> ATOM .)
    $end            reduce using rule 77 (symbol -> ATOM .)
    RBRACE          reduce using rule 77 (symbol -> ATOM .)
    RPAREN          reduce using rule 77 (symbol -> ATOM .)
    ASSIGN          reduce using rule 77 (symbol -> ATOM .)


state 98

    (83) anon_function_expr -> FUNCTION LPAREN . RPAREN block
    (84) anon_function_expr -> FUNCTION LPAREN . RPAREN NEWLINE block
    (85) anon_function_expr -> FUNCTION LPAREN . function_argument_list RPAREN block
    (86) anon_function_expr -> FUNCTION LPAREN . function_argument_list RPAREN NEWLINE block
    (37) function_argument_list -> . ATOM
    (38) function_argument_list -> . ATOM COMMA function_argument_list

    RPAREN          shift and go to state 160
    ATOM            shift and go to state 159

    function_argument_list         shift and go to state 161

state 99

    (111) command_item -> symbol .

    PIPE            reduce using rule 111 (command_item -> symbol .)
    error           reduce using rule 111 (command_item -> symbol .)
    ATOM            reduce using rule 111 (command_item -> symbol .)
    COPEN           reduce using rule 111 (command_item -> symbol .)
    LIST            reduce using rule 111 (command_item -> symbol .)
    UP              reduce using rule 111 (command_item -> symbol .)
    NUMBER          reduce using rule 111 (command_item -> symbol .)
    HEXNUMBER       reduce using rule 111 (command_item -> symbol .)
    BINNUMBER       reduce using rule 111 (command_item -> symbol .)
    OCTNUMBER       reduce using rule 111 (command_item -> symbol .)
    STRING          reduce using rule 111 (command_item -> symbol .)
    TRUE            reduce using rule 111 (command_item -> symbol .)
    FALSE           reduce using rule 111 (command_item -> symbol .)
    NULL            reduce using rule 111 (command_item -> symbol .)
    LBRACKET        reduce using rule 111 (command_item -> symbol .)
    LBRACE          reduce using rule 111 (command_item -> symbol .)
    REDIRECT        reduce using rule 111 (command_item -> symbol .)
    NEWLINE         reduce using rule 111 (command_item -> symbol .)
    $end            reduce using rule 111 (command_item -> symbol .)
    RBRACE          reduce using rule 111 (command_item -> symbol .)
    RPAREN          reduce using rule 111 (command_item -> symbol .)


state 100

    (58) expr_expansion -> EOPEN command . RPAREN

    RPAREN          shift and go to state 162


state 101

    (56) expr -> COPEN expr . RBRACE
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          shift and go to state 163
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 102

    (82) subscript_expr -> expr LBRACKET . expr RBRACKET
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 164
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 103

    (91) binary_expr -> expr GT . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 165
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 104

    (90) binary_expr -> expr NE . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 166
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 105

    (97) binary_expr -> expr MUL . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 167
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 106

    (94) binary_expr -> expr LE . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 168
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 107

    (99) binary_expr -> expr REGEX . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 169
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 108

    (100) binary_expr -> expr AND . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 170
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 109

    (98) binary_expr -> expr DIV . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 171
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 110

    (92) binary_expr -> expr GE . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 172
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 111

    (101) binary_expr -> expr OR . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 173
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 112

    (103) binary_expr -> expr MOD . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 174
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 113

    (96) binary_expr -> expr MINUS . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 175
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 114

    (95) binary_expr -> expr PLUS . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 176
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 115

    (89) binary_expr -> expr EQ . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 177
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 116

    (102) binary_expr -> expr NOT . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 178
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 117

    (93) binary_expr -> expr LT . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 179
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 118

    (57) expr_parens -> LPAREN expr RPAREN .

    RBRACE          reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    EQ              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    NE              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    GT              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    GE              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    LT              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    LE              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    MUL             reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    DIV             reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    REGEX           reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    AND             reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    OR              reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    NOT             reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    MOD             reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    REDIRECT        reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    $end            reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)
    COLON           reduce using rule 57 (expr_parens -> LPAREN expr RPAREN .)


state 119

    (43) expr_list -> expr .
    (44) expr_list -> expr . COMMA expr_list
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        reduce using rule 43 (expr_list -> expr .)
    RPAREN          reduce using rule 43 (expr_list -> expr .)
    COMMA           shift and go to state 180
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 120

    (59) array_literal -> LBRACKET RBRACKET .

    COMMA           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    EQ              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    NE              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    GT              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    GE              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    LT              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    LE              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    MUL             reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    DIV             reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    REGEX           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    AND             reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    OR              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    NOT             reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    MOD             reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    REDIRECT        reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    $end            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    COLON           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    error           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    ATOM            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    COPEN           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    LIST            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    UP              reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    HEXNUMBER       reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    BINNUMBER       reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    OCTNUMBER       reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    STRING          reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    TRUE            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    FALSE           reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    NULL            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 59 (array_literal -> LBRACKET RBRACKET .)


state 121

    (60) array_literal -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 181


state 122

    (87) unary_expr -> MINUS expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        reduce using rule 87 (unary_expr -> MINUS expr .)
    EQ              reduce using rule 87 (unary_expr -> MINUS expr .)
    NE              reduce using rule 87 (unary_expr -> MINUS expr .)
    GT              reduce using rule 87 (unary_expr -> MINUS expr .)
    GE              reduce using rule 87 (unary_expr -> MINUS expr .)
    LT              reduce using rule 87 (unary_expr -> MINUS expr .)
    LE              reduce using rule 87 (unary_expr -> MINUS expr .)
    PLUS            reduce using rule 87 (unary_expr -> MINUS expr .)
    MINUS           reduce using rule 87 (unary_expr -> MINUS expr .)
    AND             reduce using rule 87 (unary_expr -> MINUS expr .)
    OR              reduce using rule 87 (unary_expr -> MINUS expr .)
    NOT             reduce using rule 87 (unary_expr -> MINUS expr .)
    REDIRECT        reduce using rule 87 (unary_expr -> MINUS expr .)
    NEWLINE         reduce using rule 87 (unary_expr -> MINUS expr .)
    $end            reduce using rule 87 (unary_expr -> MINUS expr .)
    RBRACE          reduce using rule 87 (unary_expr -> MINUS expr .)
    COMMA           reduce using rule 87 (unary_expr -> MINUS expr .)
    RPAREN          reduce using rule 87 (unary_expr -> MINUS expr .)
    COLON           reduce using rule 87 (unary_expr -> MINUS expr .)
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! MUL             [ reduce using rule 87 (unary_expr -> MINUS expr .) ]
  ! DIV             [ reduce using rule 87 (unary_expr -> MINUS expr .) ]
  ! REGEX           [ reduce using rule 87 (unary_expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 87 (unary_expr -> MINUS expr .) ]
  ! LBRACKET        [ reduce using rule 87 (unary_expr -> MINUS expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 123

    (62) dict_literal -> LBRACE NEWLINE . RBRACE
    (67) dict_pair -> NEWLINE . expr COLON expr
    (68) dict_pair -> NEWLINE . expr COLON expr NEWLINE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    RBRACE          shift and go to state 183
    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 182
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 124

    (64) dict_pair_list -> dict_pair .
    (65) dict_pair_list -> dict_pair . COMMA dict_pair_list

    RBRACE          reduce using rule 64 (dict_pair_list -> dict_pair .)
    COMMA           shift and go to state 184


state 125

    (63) dict_literal -> LBRACE dict_pair_list . RBRACE

    RBRACE          shift and go to state 185


state 126

    (66) dict_pair -> expr . COLON expr
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    COLON           shift and go to state 186
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 127

    (61) dict_literal -> LBRACE RBRACE .

    RPAREN          reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    EQ              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    NE              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    GT              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    GE              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    LT              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    LE              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    PLUS            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    MINUS           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    MUL             reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    DIV             reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    REGEX           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    AND             reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    OR              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    NOT             reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    MOD             reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    REDIRECT        reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    NEWLINE         reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    $end            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    RBRACE          reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    COMMA           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    COLON           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    error           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    ATOM            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    COPEN           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    LIST            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    UP              reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    NUMBER          reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    HEXNUMBER       reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    BINNUMBER       reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    OCTNUMBER       reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    STRING          reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    TRUE            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    FALSE           reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    NULL            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    LBRACE          reduce using rule 61 (dict_literal -> LBRACE RBRACE .)
    PIPE            reduce using rule 61 (dict_literal -> LBRACE RBRACE .)


state 128

    (88) unary_expr -> NOT expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        reduce using rule 88 (unary_expr -> NOT expr .)
    AND             reduce using rule 88 (unary_expr -> NOT expr .)
    OR              reduce using rule 88 (unary_expr -> NOT expr .)
    REDIRECT        reduce using rule 88 (unary_expr -> NOT expr .)
    NEWLINE         reduce using rule 88 (unary_expr -> NOT expr .)
    $end            reduce using rule 88 (unary_expr -> NOT expr .)
    RBRACE          reduce using rule 88 (unary_expr -> NOT expr .)
    COMMA           reduce using rule 88 (unary_expr -> NOT expr .)
    RPAREN          reduce using rule 88 (unary_expr -> NOT expr .)
    COLON           reduce using rule 88 (unary_expr -> NOT expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! NE              [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! GT              [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! GE              [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! LT              [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! LE              [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! MUL             [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! DIV             [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! REGEX           [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! NOT             [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! LBRACKET        [ reduce using rule 88 (unary_expr -> NOT expr .) ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]


state 129

    (106) command -> command_item PIPE command .

    REDIRECT        reduce using rule 106 (command -> command_item PIPE command .)
    NEWLINE         reduce using rule 106 (command -> command_item PIPE command .)
    RBRACE          reduce using rule 106 (command -> command_item PIPE command .)
    $end            reduce using rule 106 (command -> command_item PIPE command .)
    RPAREN          reduce using rule 106 (command -> command_item PIPE command .)


state 130

    (126) unary_parameter -> COPEN expr . RBRACE
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACE          shift and go to state 187
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 131

    (138) binary_parameter -> ATOM DEC . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 188
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 132

    (132) binary_parameter -> ATOM GT . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 189
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 133

    (131) binary_parameter -> ATOM NE . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 190
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 134

    (137) binary_parameter -> ATOM INC . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 191
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 135

    (135) binary_parameter -> ATOM LE . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 192
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 136

    (136) binary_parameter -> ATOM REGEX . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 193
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 137

    (133) binary_parameter -> ATOM GE . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 194
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 138

    (130) binary_parameter -> ATOM EQ . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 195
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 139

    (129) binary_parameter -> ATOM ASSIGN . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 196
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 140

    (134) binary_parameter -> ATOM LT . parameter
    (116) parameter -> . set_parameter
    (117) parameter -> . binary_parameter
    (118) parameter -> . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (129) binary_parameter -> . ATOM ASSIGN parameter
    (130) binary_parameter -> . ATOM EQ parameter
    (131) binary_parameter -> . ATOM NE parameter
    (132) binary_parameter -> . ATOM GT parameter
    (133) binary_parameter -> . ATOM GE parameter
    (134) binary_parameter -> . ATOM LT parameter
    (135) binary_parameter -> . ATOM LE parameter
    (136) binary_parameter -> . ATOM REGEX parameter
    (137) binary_parameter -> . ATOM INC parameter
    (138) binary_parameter -> . ATOM DEC parameter
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 73
    ATOM            shift and go to state 74
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    parameter                      shift and go to state 197
    array_literal                  shift and go to state 68
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    literal                        shift and go to state 70
    set_parameter                  shift and go to state 66
    binary_parameter               shift and go to state 75

state 141

    (115) parameter_list -> parameter parameter_list .

    REDIRECT        reduce using rule 115 (parameter_list -> parameter parameter_list .)
    NEWLINE         reduce using rule 115 (parameter_list -> parameter parameter_list .)
    $end            reduce using rule 115 (parameter_list -> parameter parameter_list .)
    RBRACE          reduce using rule 115 (parameter_list -> parameter parameter_list .)
    PIPE            reduce using rule 115 (parameter_list -> parameter parameter_list .)
    RPAREN          reduce using rule 115 (parameter_list -> parameter parameter_list .)


state 142

    (107) command -> command_item parameter_list PIPE . command
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5
    ATOM            shift and go to state 97

    command                        shift and go to state 198
    symbol                         shift and go to state 99
    command_item                   shift and go to state 8

state 143

    (120) set_parameter -> unary_parameter COMMA . set_parameter
    (121) set_parameter -> unary_parameter COMMA . error
    (119) set_parameter -> . unary_parameter
    (120) set_parameter -> . unary_parameter COMMA set_parameter
    (121) set_parameter -> . unary_parameter COMMA error
    (122) unary_parameter -> . symbol
    (123) unary_parameter -> . literal
    (124) unary_parameter -> . array_literal
    (125) unary_parameter -> . dict_literal
    (126) unary_parameter -> . COPEN expr RBRACE
    (127) unary_parameter -> . LIST
    (128) unary_parameter -> . UP
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE

    error           shift and go to state 200
    COPEN           shift and go to state 71
    LIST            shift and go to state 79
    UP              shift and go to state 69
    ATOM            shift and go to state 97
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64

    set_parameter                  shift and go to state 199
    unary_parameter                shift and go to state 80
    dict_literal                   shift and go to state 72
    symbol                         shift and go to state 77
    array_literal                  shift and go to state 68
    literal                        shift and go to state 70

state 144

    (80) subscript_left -> subscript_left LBRACKET expr . RBRACKET
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 201
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 145

    (31) assignment_stmt -> subscript_left ASSIGN expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 31 (assignment_stmt -> subscript_left ASSIGN expr .)
    NEWLINE         reduce using rule 31 (assignment_stmt -> subscript_left ASSIGN expr .)
    $end            reduce using rule 31 (assignment_stmt -> subscript_left ASSIGN expr .)
    RBRACE          reduce using rule 31 (assignment_stmt -> subscript_left ASSIGN expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 146

    (3) stmt_list -> stmt_redirect NEWLINE stmt_list .

    RBRACE          reduce using rule 3 (stmt_list -> stmt_redirect NEWLINE stmt_list .)
    $end            reduce using rule 3 (stmt_list -> stmt_redirect NEWLINE stmt_list .)


state 147

    (33) function_definition_stmt -> FUNCTION ATOM LPAREN . RPAREN block
    (34) function_definition_stmt -> FUNCTION ATOM LPAREN . function_argument_list RPAREN block
    (35) function_definition_stmt -> FUNCTION ATOM LPAREN . RPAREN NEWLINE block
    (36) function_definition_stmt -> FUNCTION ATOM LPAREN . function_argument_list RPAREN NEWLINE block
    (37) function_argument_list -> . ATOM
    (38) function_argument_list -> . ATOM COMMA function_argument_list

    RPAREN          shift and go to state 202
    ATOM            shift and go to state 159

    function_argument_list         shift and go to state 203

state 148

    (25) if_stmt -> IF LPAREN expr . RPAREN block
    (26) if_stmt -> IF LPAREN expr . RPAREN block ELSE block
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 204
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 149

    (27) for_stmt -> FOR LPAREN ATOM . IN expr RPAREN block
    (28) for_stmt -> FOR LPAREN ATOM . COMMA ATOM IN expr RPAREN block

    IN              shift and go to state 206
    COMMA           shift and go to state 205


state 150

    (112) command_item -> COPEN expr RBRACE .

    PIPE            reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    error           reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    ATOM            reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    COPEN           reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    LIST            reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    UP              reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    NUMBER          reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    HEXNUMBER       reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    BINNUMBER       reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    OCTNUMBER       reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    STRING          reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    TRUE            reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    FALSE           reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    NULL            reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    LBRACKET        reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    LBRACE          reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    REDIRECT        reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    NEWLINE         reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    $end            reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    RBRACE          reduce using rule 112 (command_item -> COPEN expr RBRACE .)
    RPAREN          reduce using rule 112 (command_item -> COPEN expr RBRACE .)


state 151

    (7) stmt_redirect -> stmt REDIRECT STRING .

    NEWLINE         reduce using rule 7 (stmt_redirect -> stmt REDIRECT STRING .)
    RBRACE          reduce using rule 7 (stmt_redirect -> stmt REDIRECT STRING .)
    $end            reduce using rule 7 (stmt_redirect -> stmt REDIRECT STRING .)


state 152

    (6) stmt_redirect -> stmt REDIRECT ATOM .

    NEWLINE         reduce using rule 6 (stmt_redirect -> stmt REDIRECT ATOM .)
    RBRACE          reduce using rule 6 (stmt_redirect -> stmt REDIRECT ATOM .)
    $end            reduce using rule 6 (stmt_redirect -> stmt REDIRECT ATOM .)


state 153

    (78) call -> ATOM LPAREN RPAREN .

    REDIRECT        reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    NEWLINE         reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    RBRACE          reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    EQ              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    NE              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    GT              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    GE              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    LT              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    LE              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    PLUS            reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    MINUS           reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    MUL             reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    DIV             reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    REGEX           reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    AND             reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    OR              reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    NOT             reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    MOD             reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    LBRACKET        reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    $end            reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    RPAREN          reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    COMMA           reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    RBRACKET        reduce using rule 78 (call -> ATOM LPAREN RPAREN .)
    COLON           reduce using rule 78 (call -> ATOM LPAREN RPAREN .)


state 154

    (79) call -> ATOM LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 207


state 155

    (30) assignment_stmt -> ATOM ASSIGN expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 30 (assignment_stmt -> ATOM ASSIGN expr .)
    NEWLINE         reduce using rule 30 (assignment_stmt -> ATOM ASSIGN expr .)
    $end            reduce using rule 30 (assignment_stmt -> ATOM ASSIGN expr .)
    RBRACE          reduce using rule 30 (assignment_stmt -> ATOM ASSIGN expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 156

    (29) while_stmt -> WHILE LPAREN expr . RPAREN block
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 208
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 157

    (81) subscript_left -> symbol LBRACKET expr . RBRACKET
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 209
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 158

    (32) const_stmt -> CONST symbol ASSIGN . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 210
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 159

    (37) function_argument_list -> ATOM .
    (38) function_argument_list -> ATOM . COMMA function_argument_list

    RPAREN          reduce using rule 37 (function_argument_list -> ATOM .)
    COMMA           shift and go to state 211


state 160

    (83) anon_function_expr -> FUNCTION LPAREN RPAREN . block
    (84) anon_function_expr -> FUNCTION LPAREN RPAREN . NEWLINE block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 212
    LBRACE          shift and go to state 214

    block                          shift and go to state 213

state 161

    (85) anon_function_expr -> FUNCTION LPAREN function_argument_list . RPAREN block
    (86) anon_function_expr -> FUNCTION LPAREN function_argument_list . RPAREN NEWLINE block

    RPAREN          shift and go to state 215


state 162

    (58) expr_expansion -> EOPEN command RPAREN .

    RPAREN          reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    EQ              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    NE              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    GT              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    GE              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    LT              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    LE              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    PLUS            reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    MINUS           reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    MUL             reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    DIV             reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    REGEX           reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    AND             reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    OR              reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    NOT             reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    MOD             reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    LBRACKET        reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    COMMA           reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    RBRACKET        reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    REDIRECT        reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    NEWLINE         reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    $end            reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    RBRACE          reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)
    COLON           reduce using rule 58 (expr_expansion -> EOPEN command RPAREN .)


state 163

    (56) expr -> COPEN expr RBRACE .

    EQ              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    NE              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    GT              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    GE              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    LT              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    LE              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    PLUS            reduce using rule 56 (expr -> COPEN expr RBRACE .)
    MINUS           reduce using rule 56 (expr -> COPEN expr RBRACE .)
    MUL             reduce using rule 56 (expr -> COPEN expr RBRACE .)
    DIV             reduce using rule 56 (expr -> COPEN expr RBRACE .)
    REGEX           reduce using rule 56 (expr -> COPEN expr RBRACE .)
    AND             reduce using rule 56 (expr -> COPEN expr RBRACE .)
    OR              reduce using rule 56 (expr -> COPEN expr RBRACE .)
    NOT             reduce using rule 56 (expr -> COPEN expr RBRACE .)
    MOD             reduce using rule 56 (expr -> COPEN expr RBRACE .)
    LBRACKET        reduce using rule 56 (expr -> COPEN expr RBRACE .)
    RPAREN          reduce using rule 56 (expr -> COPEN expr RBRACE .)
    REDIRECT        reduce using rule 56 (expr -> COPEN expr RBRACE .)
    NEWLINE         reduce using rule 56 (expr -> COPEN expr RBRACE .)
    $end            reduce using rule 56 (expr -> COPEN expr RBRACE .)
    RBRACE          reduce using rule 56 (expr -> COPEN expr RBRACE .)
    COMMA           reduce using rule 56 (expr -> COPEN expr RBRACE .)
    RBRACKET        reduce using rule 56 (expr -> COPEN expr RBRACE .)
    COLON           reduce using rule 56 (expr -> COPEN expr RBRACE .)


state 164

    (82) subscript_expr -> expr LBRACKET expr . RBRACKET
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RBRACKET        shift and go to state 216
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 165

    (91) binary_expr -> expr GT expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 91 (binary_expr -> expr GT expr .)
    GT              reduce using rule 91 (binary_expr -> expr GT expr .)
    LT              reduce using rule 91 (binary_expr -> expr GT expr .)
    AND             reduce using rule 91 (binary_expr -> expr GT expr .)
    OR              reduce using rule 91 (binary_expr -> expr GT expr .)
    NOT             reduce using rule 91 (binary_expr -> expr GT expr .)
    RBRACE          reduce using rule 91 (binary_expr -> expr GT expr .)
    REDIRECT        reduce using rule 91 (binary_expr -> expr GT expr .)
    NEWLINE         reduce using rule 91 (binary_expr -> expr GT expr .)
    $end            reduce using rule 91 (binary_expr -> expr GT expr .)
    COMMA           reduce using rule 91 (binary_expr -> expr GT expr .)
    RBRACKET        reduce using rule 91 (binary_expr -> expr GT expr .)
    COLON           reduce using rule 91 (binary_expr -> expr GT expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GE              shift and go to state 110
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! REGEX           [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! LBRACKET        [ reduce using rule 91 (binary_expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 117 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 166

    (90) binary_expr -> expr NE expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 90 (binary_expr -> expr NE expr .)
    EQ              reduce using rule 90 (binary_expr -> expr NE expr .)
    NE              reduce using rule 90 (binary_expr -> expr NE expr .)
    GT              reduce using rule 90 (binary_expr -> expr NE expr .)
    GE              reduce using rule 90 (binary_expr -> expr NE expr .)
    LT              reduce using rule 90 (binary_expr -> expr NE expr .)
    LE              reduce using rule 90 (binary_expr -> expr NE expr .)
    AND             reduce using rule 90 (binary_expr -> expr NE expr .)
    OR              reduce using rule 90 (binary_expr -> expr NE expr .)
    NOT             reduce using rule 90 (binary_expr -> expr NE expr .)
    RBRACE          reduce using rule 90 (binary_expr -> expr NE expr .)
    REDIRECT        reduce using rule 90 (binary_expr -> expr NE expr .)
    NEWLINE         reduce using rule 90 (binary_expr -> expr NE expr .)
    $end            reduce using rule 90 (binary_expr -> expr NE expr .)
    COMMA           reduce using rule 90 (binary_expr -> expr NE expr .)
    RBRACKET        reduce using rule 90 (binary_expr -> expr NE expr .)
    COLON           reduce using rule 90 (binary_expr -> expr NE expr .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! PLUS            [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! MUL             [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! REGEX           [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! LBRACKET        [ reduce using rule 90 (binary_expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 167

    (97) binary_expr -> expr MUL expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 97 (binary_expr -> expr MUL expr .)
    EQ              reduce using rule 97 (binary_expr -> expr MUL expr .)
    NE              reduce using rule 97 (binary_expr -> expr MUL expr .)
    GT              reduce using rule 97 (binary_expr -> expr MUL expr .)
    GE              reduce using rule 97 (binary_expr -> expr MUL expr .)
    LT              reduce using rule 97 (binary_expr -> expr MUL expr .)
    LE              reduce using rule 97 (binary_expr -> expr MUL expr .)
    PLUS            reduce using rule 97 (binary_expr -> expr MUL expr .)
    MINUS           reduce using rule 97 (binary_expr -> expr MUL expr .)
    MUL             reduce using rule 97 (binary_expr -> expr MUL expr .)
    DIV             reduce using rule 97 (binary_expr -> expr MUL expr .)
    AND             reduce using rule 97 (binary_expr -> expr MUL expr .)
    OR              reduce using rule 97 (binary_expr -> expr MUL expr .)
    NOT             reduce using rule 97 (binary_expr -> expr MUL expr .)
    MOD             reduce using rule 97 (binary_expr -> expr MUL expr .)
    RBRACE          reduce using rule 97 (binary_expr -> expr MUL expr .)
    REDIRECT        reduce using rule 97 (binary_expr -> expr MUL expr .)
    NEWLINE         reduce using rule 97 (binary_expr -> expr MUL expr .)
    $end            reduce using rule 97 (binary_expr -> expr MUL expr .)
    COMMA           reduce using rule 97 (binary_expr -> expr MUL expr .)
    RBRACKET        reduce using rule 97 (binary_expr -> expr MUL expr .)
    COLON           reduce using rule 97 (binary_expr -> expr MUL expr .)
    REGEX           shift and go to state 107
    LBRACKET        shift and go to state 102

  ! REGEX           [ reduce using rule 97 (binary_expr -> expr MUL expr .) ]
  ! LBRACKET        [ reduce using rule 97 (binary_expr -> expr MUL expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MUL             [ shift and go to state 105 ]
  ! DIV             [ shift and go to state 109 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]
  ! MOD             [ shift and go to state 112 ]


state 168

    (94) binary_expr -> expr LE expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 94 (binary_expr -> expr LE expr .)
    GT              reduce using rule 94 (binary_expr -> expr LE expr .)
    GE              reduce using rule 94 (binary_expr -> expr LE expr .)
    LT              reduce using rule 94 (binary_expr -> expr LE expr .)
    LE              reduce using rule 94 (binary_expr -> expr LE expr .)
    AND             reduce using rule 94 (binary_expr -> expr LE expr .)
    OR              reduce using rule 94 (binary_expr -> expr LE expr .)
    NOT             reduce using rule 94 (binary_expr -> expr LE expr .)
    RBRACE          reduce using rule 94 (binary_expr -> expr LE expr .)
    REDIRECT        reduce using rule 94 (binary_expr -> expr LE expr .)
    NEWLINE         reduce using rule 94 (binary_expr -> expr LE expr .)
    $end            reduce using rule 94 (binary_expr -> expr LE expr .)
    COMMA           reduce using rule 94 (binary_expr -> expr LE expr .)
    RBRACKET        reduce using rule 94 (binary_expr -> expr LE expr .)
    COLON           reduce using rule 94 (binary_expr -> expr LE expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! MUL             [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! REGEX           [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! LBRACKET        [ reduce using rule 94 (binary_expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 169

    (99) binary_expr -> expr REGEX expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 99 (binary_expr -> expr REGEX expr .)
    EQ              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    NE              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    GT              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    GE              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    LT              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    LE              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    PLUS            reduce using rule 99 (binary_expr -> expr REGEX expr .)
    MINUS           reduce using rule 99 (binary_expr -> expr REGEX expr .)
    MUL             reduce using rule 99 (binary_expr -> expr REGEX expr .)
    DIV             reduce using rule 99 (binary_expr -> expr REGEX expr .)
    REGEX           reduce using rule 99 (binary_expr -> expr REGEX expr .)
    AND             reduce using rule 99 (binary_expr -> expr REGEX expr .)
    OR              reduce using rule 99 (binary_expr -> expr REGEX expr .)
    NOT             reduce using rule 99 (binary_expr -> expr REGEX expr .)
    MOD             reduce using rule 99 (binary_expr -> expr REGEX expr .)
    RBRACE          reduce using rule 99 (binary_expr -> expr REGEX expr .)
    REDIRECT        reduce using rule 99 (binary_expr -> expr REGEX expr .)
    NEWLINE         reduce using rule 99 (binary_expr -> expr REGEX expr .)
    $end            reduce using rule 99 (binary_expr -> expr REGEX expr .)
    COMMA           reduce using rule 99 (binary_expr -> expr REGEX expr .)
    RBRACKET        reduce using rule 99 (binary_expr -> expr REGEX expr .)
    COLON           reduce using rule 99 (binary_expr -> expr REGEX expr .)
    LBRACKET        shift and go to state 102

  ! LBRACKET        [ reduce using rule 99 (binary_expr -> expr REGEX expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MUL             [ shift and go to state 105 ]
  ! DIV             [ shift and go to state 109 ]
  ! REGEX           [ shift and go to state 107 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]
  ! MOD             [ shift and go to state 112 ]


state 170

    (100) binary_expr -> expr AND expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 100 (binary_expr -> expr AND expr .)
    AND             reduce using rule 100 (binary_expr -> expr AND expr .)
    OR              reduce using rule 100 (binary_expr -> expr AND expr .)
    RBRACE          reduce using rule 100 (binary_expr -> expr AND expr .)
    REDIRECT        reduce using rule 100 (binary_expr -> expr AND expr .)
    NEWLINE         reduce using rule 100 (binary_expr -> expr AND expr .)
    $end            reduce using rule 100 (binary_expr -> expr AND expr .)
    COMMA           reduce using rule 100 (binary_expr -> expr AND expr .)
    RBRACKET        reduce using rule 100 (binary_expr -> expr AND expr .)
    COLON           reduce using rule 100 (binary_expr -> expr AND expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! MUL             [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! REGEX           [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! NOT             [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! LBRACKET        [ reduce using rule 100 (binary_expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]


state 171

    (98) binary_expr -> expr DIV expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 98 (binary_expr -> expr DIV expr .)
    EQ              reduce using rule 98 (binary_expr -> expr DIV expr .)
    NE              reduce using rule 98 (binary_expr -> expr DIV expr .)
    GT              reduce using rule 98 (binary_expr -> expr DIV expr .)
    GE              reduce using rule 98 (binary_expr -> expr DIV expr .)
    LT              reduce using rule 98 (binary_expr -> expr DIV expr .)
    LE              reduce using rule 98 (binary_expr -> expr DIV expr .)
    PLUS            reduce using rule 98 (binary_expr -> expr DIV expr .)
    MINUS           reduce using rule 98 (binary_expr -> expr DIV expr .)
    MUL             reduce using rule 98 (binary_expr -> expr DIV expr .)
    DIV             reduce using rule 98 (binary_expr -> expr DIV expr .)
    AND             reduce using rule 98 (binary_expr -> expr DIV expr .)
    OR              reduce using rule 98 (binary_expr -> expr DIV expr .)
    NOT             reduce using rule 98 (binary_expr -> expr DIV expr .)
    MOD             reduce using rule 98 (binary_expr -> expr DIV expr .)
    RBRACE          reduce using rule 98 (binary_expr -> expr DIV expr .)
    REDIRECT        reduce using rule 98 (binary_expr -> expr DIV expr .)
    NEWLINE         reduce using rule 98 (binary_expr -> expr DIV expr .)
    $end            reduce using rule 98 (binary_expr -> expr DIV expr .)
    COMMA           reduce using rule 98 (binary_expr -> expr DIV expr .)
    RBRACKET        reduce using rule 98 (binary_expr -> expr DIV expr .)
    COLON           reduce using rule 98 (binary_expr -> expr DIV expr .)
    REGEX           shift and go to state 107
    LBRACKET        shift and go to state 102

  ! REGEX           [ reduce using rule 98 (binary_expr -> expr DIV expr .) ]
  ! LBRACKET        [ reduce using rule 98 (binary_expr -> expr DIV expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MUL             [ shift and go to state 105 ]
  ! DIV             [ shift and go to state 109 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]
  ! MOD             [ shift and go to state 112 ]


state 172

    (92) binary_expr -> expr GE expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 92 (binary_expr -> expr GE expr .)
    GT              reduce using rule 92 (binary_expr -> expr GE expr .)
    GE              reduce using rule 92 (binary_expr -> expr GE expr .)
    LT              reduce using rule 92 (binary_expr -> expr GE expr .)
    LE              reduce using rule 92 (binary_expr -> expr GE expr .)
    AND             reduce using rule 92 (binary_expr -> expr GE expr .)
    OR              reduce using rule 92 (binary_expr -> expr GE expr .)
    NOT             reduce using rule 92 (binary_expr -> expr GE expr .)
    RBRACE          reduce using rule 92 (binary_expr -> expr GE expr .)
    REDIRECT        reduce using rule 92 (binary_expr -> expr GE expr .)
    NEWLINE         reduce using rule 92 (binary_expr -> expr GE expr .)
    $end            reduce using rule 92 (binary_expr -> expr GE expr .)
    COMMA           reduce using rule 92 (binary_expr -> expr GE expr .)
    RBRACKET        reduce using rule 92 (binary_expr -> expr GE expr .)
    COLON           reduce using rule 92 (binary_expr -> expr GE expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! MUL             [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! REGEX           [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! LBRACKET        [ reduce using rule 92 (binary_expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 173

    (101) binary_expr -> expr OR expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 101 (binary_expr -> expr OR expr .)
    AND             reduce using rule 101 (binary_expr -> expr OR expr .)
    OR              reduce using rule 101 (binary_expr -> expr OR expr .)
    RBRACE          reduce using rule 101 (binary_expr -> expr OR expr .)
    REDIRECT        reduce using rule 101 (binary_expr -> expr OR expr .)
    NEWLINE         reduce using rule 101 (binary_expr -> expr OR expr .)
    $end            reduce using rule 101 (binary_expr -> expr OR expr .)
    COMMA           reduce using rule 101 (binary_expr -> expr OR expr .)
    RBRACKET        reduce using rule 101 (binary_expr -> expr OR expr .)
    COLON           reduce using rule 101 (binary_expr -> expr OR expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! MUL             [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! REGEX           [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! NOT             [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! LBRACKET        [ reduce using rule 101 (binary_expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]


state 174

    (103) binary_expr -> expr MOD expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 103 (binary_expr -> expr MOD expr .)
    EQ              reduce using rule 103 (binary_expr -> expr MOD expr .)
    NE              reduce using rule 103 (binary_expr -> expr MOD expr .)
    GT              reduce using rule 103 (binary_expr -> expr MOD expr .)
    GE              reduce using rule 103 (binary_expr -> expr MOD expr .)
    LT              reduce using rule 103 (binary_expr -> expr MOD expr .)
    LE              reduce using rule 103 (binary_expr -> expr MOD expr .)
    PLUS            reduce using rule 103 (binary_expr -> expr MOD expr .)
    MINUS           reduce using rule 103 (binary_expr -> expr MOD expr .)
    MUL             reduce using rule 103 (binary_expr -> expr MOD expr .)
    DIV             reduce using rule 103 (binary_expr -> expr MOD expr .)
    AND             reduce using rule 103 (binary_expr -> expr MOD expr .)
    OR              reduce using rule 103 (binary_expr -> expr MOD expr .)
    NOT             reduce using rule 103 (binary_expr -> expr MOD expr .)
    MOD             reduce using rule 103 (binary_expr -> expr MOD expr .)
    RBRACE          reduce using rule 103 (binary_expr -> expr MOD expr .)
    REDIRECT        reduce using rule 103 (binary_expr -> expr MOD expr .)
    NEWLINE         reduce using rule 103 (binary_expr -> expr MOD expr .)
    $end            reduce using rule 103 (binary_expr -> expr MOD expr .)
    COMMA           reduce using rule 103 (binary_expr -> expr MOD expr .)
    RBRACKET        reduce using rule 103 (binary_expr -> expr MOD expr .)
    COLON           reduce using rule 103 (binary_expr -> expr MOD expr .)
    REGEX           shift and go to state 107
    LBRACKET        shift and go to state 102

  ! REGEX           [ reduce using rule 103 (binary_expr -> expr MOD expr .) ]
  ! LBRACKET        [ reduce using rule 103 (binary_expr -> expr MOD expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! MUL             [ shift and go to state 105 ]
  ! DIV             [ shift and go to state 109 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]
  ! MOD             [ shift and go to state 112 ]


state 175

    (96) binary_expr -> expr MINUS expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 96 (binary_expr -> expr MINUS expr .)
    EQ              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    NE              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    GT              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    GE              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    LT              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    LE              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    PLUS            reduce using rule 96 (binary_expr -> expr MINUS expr .)
    MINUS           reduce using rule 96 (binary_expr -> expr MINUS expr .)
    AND             reduce using rule 96 (binary_expr -> expr MINUS expr .)
    OR              reduce using rule 96 (binary_expr -> expr MINUS expr .)
    NOT             reduce using rule 96 (binary_expr -> expr MINUS expr .)
    RBRACE          reduce using rule 96 (binary_expr -> expr MINUS expr .)
    REDIRECT        reduce using rule 96 (binary_expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 96 (binary_expr -> expr MINUS expr .)
    $end            reduce using rule 96 (binary_expr -> expr MINUS expr .)
    COMMA           reduce using rule 96 (binary_expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 96 (binary_expr -> expr MINUS expr .)
    COLON           reduce using rule 96 (binary_expr -> expr MINUS expr .)
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! MUL             [ reduce using rule 96 (binary_expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 96 (binary_expr -> expr MINUS expr .) ]
  ! REGEX           [ reduce using rule 96 (binary_expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 96 (binary_expr -> expr MINUS expr .) ]
  ! LBRACKET        [ reduce using rule 96 (binary_expr -> expr MINUS expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 176

    (95) binary_expr -> expr PLUS expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 95 (binary_expr -> expr PLUS expr .)
    EQ              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    NE              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    GT              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    GE              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    LT              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    LE              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    PLUS            reduce using rule 95 (binary_expr -> expr PLUS expr .)
    MINUS           reduce using rule 95 (binary_expr -> expr PLUS expr .)
    AND             reduce using rule 95 (binary_expr -> expr PLUS expr .)
    OR              reduce using rule 95 (binary_expr -> expr PLUS expr .)
    NOT             reduce using rule 95 (binary_expr -> expr PLUS expr .)
    RBRACE          reduce using rule 95 (binary_expr -> expr PLUS expr .)
    REDIRECT        reduce using rule 95 (binary_expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 95 (binary_expr -> expr PLUS expr .)
    $end            reduce using rule 95 (binary_expr -> expr PLUS expr .)
    COMMA           reduce using rule 95 (binary_expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 95 (binary_expr -> expr PLUS expr .)
    COLON           reduce using rule 95 (binary_expr -> expr PLUS expr .)
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! MUL             [ reduce using rule 95 (binary_expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 95 (binary_expr -> expr PLUS expr .) ]
  ! REGEX           [ reduce using rule 95 (binary_expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 95 (binary_expr -> expr PLUS expr .) ]
  ! LBRACKET        [ reduce using rule 95 (binary_expr -> expr PLUS expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! PLUS            [ shift and go to state 114 ]
  ! MINUS           [ shift and go to state 113 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 177

    (89) binary_expr -> expr EQ expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 89 (binary_expr -> expr EQ expr .)
    EQ              reduce using rule 89 (binary_expr -> expr EQ expr .)
    NE              reduce using rule 89 (binary_expr -> expr EQ expr .)
    GT              reduce using rule 89 (binary_expr -> expr EQ expr .)
    GE              reduce using rule 89 (binary_expr -> expr EQ expr .)
    LT              reduce using rule 89 (binary_expr -> expr EQ expr .)
    LE              reduce using rule 89 (binary_expr -> expr EQ expr .)
    AND             reduce using rule 89 (binary_expr -> expr EQ expr .)
    OR              reduce using rule 89 (binary_expr -> expr EQ expr .)
    NOT             reduce using rule 89 (binary_expr -> expr EQ expr .)
    RBRACE          reduce using rule 89 (binary_expr -> expr EQ expr .)
    REDIRECT        reduce using rule 89 (binary_expr -> expr EQ expr .)
    NEWLINE         reduce using rule 89 (binary_expr -> expr EQ expr .)
    $end            reduce using rule 89 (binary_expr -> expr EQ expr .)
    COMMA           reduce using rule 89 (binary_expr -> expr EQ expr .)
    RBRACKET        reduce using rule 89 (binary_expr -> expr EQ expr .)
    COLON           reduce using rule 89 (binary_expr -> expr EQ expr .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! PLUS            [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! REGEX           [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! LBRACKET        [ reduce using rule 89 (binary_expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 115 ]
  ! NE              [ shift and go to state 104 ]
  ! GT              [ shift and go to state 103 ]
  ! GE              [ shift and go to state 110 ]
  ! LT              [ shift and go to state 117 ]
  ! LE              [ shift and go to state 106 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 178

    (102) binary_expr -> expr NOT expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 102 (binary_expr -> expr NOT expr .)
    AND             reduce using rule 102 (binary_expr -> expr NOT expr .)
    OR              reduce using rule 102 (binary_expr -> expr NOT expr .)
    RBRACE          reduce using rule 102 (binary_expr -> expr NOT expr .)
    REDIRECT        reduce using rule 102 (binary_expr -> expr NOT expr .)
    NEWLINE         reduce using rule 102 (binary_expr -> expr NOT expr .)
    $end            reduce using rule 102 (binary_expr -> expr NOT expr .)
    COMMA           reduce using rule 102 (binary_expr -> expr NOT expr .)
    RBRACKET        reduce using rule 102 (binary_expr -> expr NOT expr .)
    COLON           reduce using rule 102 (binary_expr -> expr NOT expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! NE              [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! GT              [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! GE              [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! LT              [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! LE              [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! PLUS            [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! MINUS           [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! MUL             [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! DIV             [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! REGEX           [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! NOT             [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! MOD             [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! LBRACKET        [ reduce using rule 102 (binary_expr -> expr NOT expr .) ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]


state 179

    (93) binary_expr -> expr LT expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          reduce using rule 93 (binary_expr -> expr LT expr .)
    GT              reduce using rule 93 (binary_expr -> expr LT expr .)
    LT              reduce using rule 93 (binary_expr -> expr LT expr .)
    AND             reduce using rule 93 (binary_expr -> expr LT expr .)
    OR              reduce using rule 93 (binary_expr -> expr LT expr .)
    NOT             reduce using rule 93 (binary_expr -> expr LT expr .)
    RBRACE          reduce using rule 93 (binary_expr -> expr LT expr .)
    REDIRECT        reduce using rule 93 (binary_expr -> expr LT expr .)
    NEWLINE         reduce using rule 93 (binary_expr -> expr LT expr .)
    $end            reduce using rule 93 (binary_expr -> expr LT expr .)
    COMMA           reduce using rule 93 (binary_expr -> expr LT expr .)
    RBRACKET        reduce using rule 93 (binary_expr -> expr LT expr .)
    COLON           reduce using rule 93 (binary_expr -> expr LT expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GE              shift and go to state 110
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102

  ! EQ              [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! REGEX           [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! LBRACKET        [ reduce using rule 93 (binary_expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 103 ]
  ! LT              [ shift and go to state 117 ]
  ! AND             [ shift and go to state 108 ]
  ! OR              [ shift and go to state 111 ]
  ! NOT             [ shift and go to state 116 ]


state 180

    (44) expr_list -> expr COMMA . expr_list
    (43) expr_list -> . expr
    (44) expr_list -> . expr COMMA expr_list
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 119
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    expr_list                      shift and go to state 217
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 181

    (60) array_literal -> LBRACKET expr_list RBRACKET .

    COMMA           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    REGEX           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    NOT             reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    MOD             reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    LBRACKET        reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    REDIRECT        reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    NEWLINE         reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    $end            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    error           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    ATOM            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    COPEN           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    LIST            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    UP              reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    NUMBER          reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    HEXNUMBER       reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    BINNUMBER       reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    OCTNUMBER       reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    STRING          reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    TRUE            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    FALSE           reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    NULL            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)
    PIPE            reduce using rule 60 (array_literal -> LBRACKET expr_list RBRACKET .)


state 182

    (67) dict_pair -> NEWLINE expr . COLON expr
    (68) dict_pair -> NEWLINE expr . COLON expr NEWLINE
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    COLON           shift and go to state 218
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 183

    (62) dict_literal -> LBRACE NEWLINE RBRACE .

    RPAREN          reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    EQ              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NE              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    GT              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    GE              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LT              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LE              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    PLUS            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    MINUS           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    MUL             reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    DIV             reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    REGEX           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    AND             reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    OR              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NOT             reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    MOD             reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LBRACKET        reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    REDIRECT        reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NEWLINE         reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    $end            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    RBRACE          reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    COMMA           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    RBRACKET        reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    COLON           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    error           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    ATOM            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    COPEN           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LIST            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    UP              reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NUMBER          reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    HEXNUMBER       reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    BINNUMBER       reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    OCTNUMBER       reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    STRING          reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    TRUE            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    FALSE           reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    NULL            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    LBRACE          reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)
    PIPE            reduce using rule 62 (dict_literal -> LBRACE NEWLINE RBRACE .)


state 184

    (65) dict_pair_list -> dict_pair COMMA . dict_pair_list
    (64) dict_pair_list -> . dict_pair
    (65) dict_pair_list -> . dict_pair COMMA dict_pair_list
    (66) dict_pair -> . expr COLON expr
    (67) dict_pair -> . NEWLINE expr COLON expr
    (68) dict_pair -> . NEWLINE expr COLON expr NEWLINE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    NEWLINE         shift and go to state 219
    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 126
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    subscript_expr                 shift and go to state 61
    dict_pair_list                 shift and go to state 220
    anon_function_expr             shift and go to state 47
    dict_pair                      shift and go to state 124
    unary_expr                     shift and go to state 57
    symbol                         shift and go to state 62
    binary_expr                    shift and go to state 59
    array_literal                  shift and go to state 46
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 185

    (63) dict_literal -> LBRACE dict_pair_list RBRACE .

    RPAREN          reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    EQ              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NE              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    GT              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    GE              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LT              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LE              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    PLUS            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    MINUS           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    MUL             reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    DIV             reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    REGEX           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    AND             reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    OR              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NOT             reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    MOD             reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LBRACKET        reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    REDIRECT        reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NEWLINE         reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    $end            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    RBRACE          reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    COMMA           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    RBRACKET        reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    COLON           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    error           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    ATOM            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    COPEN           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LIST            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    UP              reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NUMBER          reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    HEXNUMBER       reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    BINNUMBER       reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    OCTNUMBER       reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    STRING          reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    TRUE            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    FALSE           reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    NULL            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    LBRACE          reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)
    PIPE            reduce using rule 63 (dict_literal -> LBRACE dict_pair_list RBRACE .)


state 186

    (66) dict_pair -> expr COLON . expr
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 221
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 187

    (126) unary_parameter -> COPEN expr RBRACE .

    COMMA           reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    error           reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    ATOM            reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    COPEN           reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    LIST            reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    UP              reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    NUMBER          reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    HEXNUMBER       reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    BINNUMBER       reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    OCTNUMBER       reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    STRING          reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    TRUE            reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    FALSE           reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    NULL            reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    LBRACKET        reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    LBRACE          reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    PIPE            reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    REDIRECT        reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    NEWLINE         reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    $end            reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    RBRACE          reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)
    RPAREN          reduce using rule 126 (unary_parameter -> COPEN expr RBRACE .)


state 188

    (138) binary_parameter -> ATOM DEC parameter .

    error           reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    ATOM            reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    COPEN           reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    LIST            reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    UP              reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    NUMBER          reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    HEXNUMBER       reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    BINNUMBER       reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    OCTNUMBER       reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    STRING          reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    TRUE            reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    FALSE           reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    NULL            reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    LBRACKET        reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    LBRACE          reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    PIPE            reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    REDIRECT        reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    NEWLINE         reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    $end            reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    RBRACE          reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)
    RPAREN          reduce using rule 138 (binary_parameter -> ATOM DEC parameter .)


state 189

    (132) binary_parameter -> ATOM GT parameter .

    error           reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    ATOM            reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    COPEN           reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    LIST            reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    UP              reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    NUMBER          reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    HEXNUMBER       reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    BINNUMBER       reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    OCTNUMBER       reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    STRING          reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    TRUE            reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    FALSE           reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    NULL            reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    LBRACKET        reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    LBRACE          reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    PIPE            reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    REDIRECT        reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    NEWLINE         reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    $end            reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    RBRACE          reduce using rule 132 (binary_parameter -> ATOM GT parameter .)
    RPAREN          reduce using rule 132 (binary_parameter -> ATOM GT parameter .)


state 190

    (131) binary_parameter -> ATOM NE parameter .

    error           reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    ATOM            reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    COPEN           reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    LIST            reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    UP              reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    NUMBER          reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    HEXNUMBER       reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    BINNUMBER       reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    OCTNUMBER       reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    STRING          reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    TRUE            reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    FALSE           reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    NULL            reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    LBRACKET        reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    LBRACE          reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    PIPE            reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    REDIRECT        reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    NEWLINE         reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    $end            reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    RBRACE          reduce using rule 131 (binary_parameter -> ATOM NE parameter .)
    RPAREN          reduce using rule 131 (binary_parameter -> ATOM NE parameter .)


state 191

    (137) binary_parameter -> ATOM INC parameter .

    error           reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    ATOM            reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    COPEN           reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    LIST            reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    UP              reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    NUMBER          reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    HEXNUMBER       reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    BINNUMBER       reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    OCTNUMBER       reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    STRING          reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    TRUE            reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    FALSE           reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    NULL            reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    LBRACKET        reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    LBRACE          reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    PIPE            reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    REDIRECT        reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    NEWLINE         reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    $end            reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    RBRACE          reduce using rule 137 (binary_parameter -> ATOM INC parameter .)
    RPAREN          reduce using rule 137 (binary_parameter -> ATOM INC parameter .)


state 192

    (135) binary_parameter -> ATOM LE parameter .

    error           reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    ATOM            reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    COPEN           reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    LIST            reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    UP              reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    NUMBER          reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    HEXNUMBER       reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    BINNUMBER       reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    OCTNUMBER       reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    STRING          reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    TRUE            reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    FALSE           reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    NULL            reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    LBRACKET        reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    LBRACE          reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    PIPE            reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    REDIRECT        reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    NEWLINE         reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    $end            reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    RBRACE          reduce using rule 135 (binary_parameter -> ATOM LE parameter .)
    RPAREN          reduce using rule 135 (binary_parameter -> ATOM LE parameter .)


state 193

    (136) binary_parameter -> ATOM REGEX parameter .

    error           reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    ATOM            reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    COPEN           reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    LIST            reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    UP              reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    NUMBER          reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    HEXNUMBER       reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    BINNUMBER       reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    OCTNUMBER       reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    STRING          reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    TRUE            reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    FALSE           reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    NULL            reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    LBRACKET        reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    LBRACE          reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    PIPE            reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    REDIRECT        reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    NEWLINE         reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    $end            reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    RBRACE          reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)
    RPAREN          reduce using rule 136 (binary_parameter -> ATOM REGEX parameter .)


state 194

    (133) binary_parameter -> ATOM GE parameter .

    error           reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    ATOM            reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    COPEN           reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    LIST            reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    UP              reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    NUMBER          reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    HEXNUMBER       reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    BINNUMBER       reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    OCTNUMBER       reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    STRING          reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    TRUE            reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    FALSE           reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    NULL            reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    LBRACKET        reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    LBRACE          reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    PIPE            reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    REDIRECT        reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    NEWLINE         reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    $end            reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    RBRACE          reduce using rule 133 (binary_parameter -> ATOM GE parameter .)
    RPAREN          reduce using rule 133 (binary_parameter -> ATOM GE parameter .)


state 195

    (130) binary_parameter -> ATOM EQ parameter .

    error           reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    ATOM            reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    COPEN           reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    LIST            reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    UP              reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    NUMBER          reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    HEXNUMBER       reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    BINNUMBER       reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    OCTNUMBER       reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    STRING          reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    TRUE            reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    FALSE           reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    NULL            reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    LBRACKET        reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    LBRACE          reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    PIPE            reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    REDIRECT        reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    NEWLINE         reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    $end            reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    RBRACE          reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)
    RPAREN          reduce using rule 130 (binary_parameter -> ATOM EQ parameter .)


state 196

    (129) binary_parameter -> ATOM ASSIGN parameter .

    error           reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    ATOM            reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    COPEN           reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    LIST            reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    UP              reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    NUMBER          reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    HEXNUMBER       reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    BINNUMBER       reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    OCTNUMBER       reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    STRING          reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    TRUE            reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    FALSE           reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    NULL            reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    LBRACKET        reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    LBRACE          reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    PIPE            reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    REDIRECT        reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    NEWLINE         reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    $end            reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    RBRACE          reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)
    RPAREN          reduce using rule 129 (binary_parameter -> ATOM ASSIGN parameter .)


state 197

    (134) binary_parameter -> ATOM LT parameter .

    error           reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    ATOM            reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    COPEN           reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    LIST            reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    UP              reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    NUMBER          reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    HEXNUMBER       reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    BINNUMBER       reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    OCTNUMBER       reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    STRING          reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    TRUE            reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    FALSE           reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    NULL            reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    LBRACKET        reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    LBRACE          reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    PIPE            reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    REDIRECT        reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    NEWLINE         reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    $end            reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    RBRACE          reduce using rule 134 (binary_parameter -> ATOM LT parameter .)
    RPAREN          reduce using rule 134 (binary_parameter -> ATOM LT parameter .)


state 198

    (107) command -> command_item parameter_list PIPE command .

    REDIRECT        reduce using rule 107 (command -> command_item parameter_list PIPE command .)
    NEWLINE         reduce using rule 107 (command -> command_item parameter_list PIPE command .)
    RBRACE          reduce using rule 107 (command -> command_item parameter_list PIPE command .)
    $end            reduce using rule 107 (command -> command_item parameter_list PIPE command .)
    RPAREN          reduce using rule 107 (command -> command_item parameter_list PIPE command .)


state 199

    (120) set_parameter -> unary_parameter COMMA set_parameter .

    error           reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    ATOM            reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    COPEN           reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    LIST            reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    UP              reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    NUMBER          reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    HEXNUMBER       reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    BINNUMBER       reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    OCTNUMBER       reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    STRING          reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    TRUE            reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    FALSE           reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    NULL            reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    LBRACKET        reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    LBRACE          reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    PIPE            reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    REDIRECT        reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    NEWLINE         reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    $end            reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    RBRACE          reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)
    RPAREN          reduce using rule 120 (set_parameter -> unary_parameter COMMA set_parameter .)


state 200

    (121) set_parameter -> unary_parameter COMMA error .

    error           reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    ATOM            reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    COPEN           reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    LIST            reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    UP              reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    NUMBER          reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    HEXNUMBER       reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    BINNUMBER       reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    OCTNUMBER       reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    STRING          reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    TRUE            reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    FALSE           reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    NULL            reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    LBRACKET        reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    LBRACE          reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    PIPE            reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    REDIRECT        reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    NEWLINE         reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    $end            reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    RBRACE          reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)
    RPAREN          reduce using rule 121 (set_parameter -> unary_parameter COMMA error .)


state 201

    (80) subscript_left -> subscript_left LBRACKET expr RBRACKET .

    ASSIGN          reduce using rule 80 (subscript_left -> subscript_left LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 80 (subscript_left -> subscript_left LBRACKET expr RBRACKET .)


state 202

    (33) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN . block
    (35) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN . NEWLINE block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 222
    LBRACE          shift and go to state 214

    block                          shift and go to state 223

state 203

    (34) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list . RPAREN block
    (36) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list . RPAREN NEWLINE block

    RPAREN          shift and go to state 224


state 204

    (25) if_stmt -> IF LPAREN expr RPAREN . block
    (26) if_stmt -> IF LPAREN expr RPAREN . block ELSE block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 225

state 205

    (28) for_stmt -> FOR LPAREN ATOM COMMA . ATOM IN expr RPAREN block

    ATOM            shift and go to state 226


state 206

    (27) for_stmt -> FOR LPAREN ATOM IN . expr RPAREN block
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 227
    dict_literal                   shift and go to state 53
    symbol                         shift and go to state 62
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    binary_expr                    shift and go to state 59
    call                           shift and go to state 41
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 207

    (79) call -> ATOM LPAREN expr_list RPAREN .

    REDIRECT        reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    NEWLINE         reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    RBRACE          reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    EQ              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    NE              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    GT              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    GE              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    LT              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    LE              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    MUL             reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    DIV             reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    REGEX           reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    AND             reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    OR              reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    NOT             reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    MOD             reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    LBRACKET        reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    $end            reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)
    COLON           reduce using rule 79 (call -> ATOM LPAREN expr_list RPAREN .)


state 208

    (29) while_stmt -> WHILE LPAREN expr RPAREN . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 228

state 209

    (81) subscript_left -> symbol LBRACKET expr RBRACKET .

    ASSIGN          reduce using rule 81 (subscript_left -> symbol LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 81 (subscript_left -> symbol LBRACKET expr RBRACKET .)


state 210

    (32) const_stmt -> CONST symbol ASSIGN expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    REDIRECT        reduce using rule 32 (const_stmt -> CONST symbol ASSIGN expr .)
    NEWLINE         reduce using rule 32 (const_stmt -> CONST symbol ASSIGN expr .)
    $end            reduce using rule 32 (const_stmt -> CONST symbol ASSIGN expr .)
    RBRACE          reduce using rule 32 (const_stmt -> CONST symbol ASSIGN expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 211

    (38) function_argument_list -> ATOM COMMA . function_argument_list
    (37) function_argument_list -> . ATOM
    (38) function_argument_list -> . ATOM COMMA function_argument_list

    ATOM            shift and go to state 159

    function_argument_list         shift and go to state 229

state 212

    (84) anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 230

state 213

    (83) anon_function_expr -> FUNCTION LPAREN RPAREN block .

    EQ              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    NE              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    GT              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    GE              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    LT              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    LE              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    PLUS            reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    MINUS           reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    MUL             reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    DIV             reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    REGEX           reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    AND             reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    OR              reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    NOT             reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    MOD             reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    LBRACKET        reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    RPAREN          reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    REDIRECT        reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    NEWLINE         reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    $end            reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    RBRACE          reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    COMMA           reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    RBRACKET        reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)
    COLON           reduce using rule 83 (anon_function_expr -> FUNCTION LPAREN RPAREN block .)


state 214

    (21) block -> LBRACE . stmt_list RBRACE
    (22) block -> LBRACE . NEWLINE stmt_list RBRACE
    (23) block -> LBRACE . NEWLINE RBRACE
    (24) block -> LBRACE . RBRACE
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . const_stmt
    (17) stmt -> . command
    (18) stmt -> . call
    (19) stmt -> . expr_parens
    (20) stmt -> . shell
    (25) if_stmt -> . IF LPAREN expr RPAREN block
    (26) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (27) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (28) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (29) while_stmt -> . WHILE LPAREN expr RPAREN block
    (30) assignment_stmt -> . ATOM ASSIGN expr
    (31) assignment_stmt -> . subscript_left ASSIGN expr
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (34) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (39) return_stmt -> . RETURN
    (40) return_stmt -> . RETURN expr
    (41) break_stmt -> . BREAK
    (42) undef_stmt -> . UNDEF ATOM
    (32) const_stmt -> . CONST symbol ASSIGN expr
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN
    (139) shell -> . SHELL
    (140) shell -> . SHELL parameter_list
    (80) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (81) subscript_left -> . symbol LBRACKET expr RBRACKET
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    NEWLINE         shift and go to state 231
    RBRACE          shift and go to state 232
    IF              shift and go to state 16
    FOR             shift and go to state 19
    WHILE           shift and go to state 32
    ATOM            shift and go to state 31
    FUNCTION        shift and go to state 15
    RETURN          shift and go to state 12
    BREAK           shift and go to state 35
    UNDEF           shift and go to state 30
    CONST           shift and go to state 34
    LPAREN          shift and go to state 3
    SHELL           shift and go to state 22
    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5

    return_stmt                    shift and go to state 2
    while_stmt                     shift and go to state 4
    call                           shift and go to state 6
    subscript_left                 shift and go to state 9
    stmt                           shift and go to state 26
    command                        shift and go to state 28
    shell                          shift and go to state 20
    stmt_list                      shift and go to state 233
    command_item                   shift and go to state 8
    if_stmt                        shift and go to state 25
    const_stmt                     shift and go to state 10
    symbol                         shift and go to state 33
    assignment_stmt                shift and go to state 13
    stmt_redirect                  shift and go to state 14
    function_definition_stmt       shift and go to state 11
    break_stmt                     shift and go to state 7
    for_stmt                       shift and go to state 18
    undef_stmt                     shift and go to state 29
    expr_parens                    shift and go to state 21

state 215

    (85) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN . block
    (86) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN . NEWLINE block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 234
    LBRACE          shift and go to state 214

    block                          shift and go to state 235

state 216

    (82) subscript_expr -> expr LBRACKET expr RBRACKET .

    EQ              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    NE              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    GT              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    GE              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    LT              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    LE              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    MUL             reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    DIV             reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    REGEX           reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    NOT             reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    MOD             reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    REDIRECT        reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    NEWLINE         reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    $end            reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 82 (subscript_expr -> expr LBRACKET expr RBRACKET .)


state 217

    (44) expr_list -> expr COMMA expr_list .

    RBRACKET        reduce using rule 44 (expr_list -> expr COMMA expr_list .)
    RPAREN          reduce using rule 44 (expr_list -> expr COMMA expr_list .)


state 218

    (67) dict_pair -> NEWLINE expr COLON . expr
    (68) dict_pair -> NEWLINE expr COLON . expr NEWLINE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 236
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 219

    (67) dict_pair -> NEWLINE . expr COLON expr
    (68) dict_pair -> NEWLINE . expr COLON expr NEWLINE
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr                           shift and go to state 182
    dict_literal                   shift and go to state 53
    call                           shift and go to state 41
    expr_expansion                 shift and go to state 45
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    subscript_expr                 shift and go to state 61
    binary_expr                    shift and go to state 59
    symbol                         shift and go to state 62
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 220

    (65) dict_pair_list -> dict_pair COMMA dict_pair_list .

    RBRACE          reduce using rule 65 (dict_pair_list -> dict_pair COMMA dict_pair_list .)


state 221

    (66) dict_pair -> expr COLON expr .
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    COMMA           reduce using rule 66 (dict_pair -> expr COLON expr .)
    RBRACE          reduce using rule 66 (dict_pair -> expr COLON expr .)
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 222

    (35) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 237

state 223

    (33) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .

    REDIRECT        reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)
    NEWLINE         reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)
    $end            reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)
    RBRACE          reduce using rule 33 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN block .)


state 224

    (34) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN . block
    (36) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN . NEWLINE block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    NEWLINE         shift and go to state 238
    LBRACE          shift and go to state 214

    block                          shift and go to state 239

state 225

    (25) if_stmt -> IF LPAREN expr RPAREN block .
    (26) if_stmt -> IF LPAREN expr RPAREN block . ELSE block

    REDIRECT        reduce using rule 25 (if_stmt -> IF LPAREN expr RPAREN block .)
    NEWLINE         reduce using rule 25 (if_stmt -> IF LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 25 (if_stmt -> IF LPAREN expr RPAREN block .)
    $end            reduce using rule 25 (if_stmt -> IF LPAREN expr RPAREN block .)
    ELSE            shift and go to state 240


state 226

    (28) for_stmt -> FOR LPAREN ATOM COMMA ATOM . IN expr RPAREN block

    IN              shift and go to state 241


state 227

    (27) for_stmt -> FOR LPAREN ATOM IN expr . RPAREN block
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 242
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 228

    (29) while_stmt -> WHILE LPAREN expr RPAREN block .

    REDIRECT        reduce using rule 29 (while_stmt -> WHILE LPAREN expr RPAREN block .)
    NEWLINE         reduce using rule 29 (while_stmt -> WHILE LPAREN expr RPAREN block .)
    $end            reduce using rule 29 (while_stmt -> WHILE LPAREN expr RPAREN block .)
    RBRACE          reduce using rule 29 (while_stmt -> WHILE LPAREN expr RPAREN block .)


state 229

    (38) function_argument_list -> ATOM COMMA function_argument_list .

    RPAREN          reduce using rule 38 (function_argument_list -> ATOM COMMA function_argument_list .)


state 230

    (84) anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .

    EQ              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    NE              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    GT              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    GE              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    LT              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    LE              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    PLUS            reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    MINUS           reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    MUL             reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    DIV             reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    REGEX           reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    AND             reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    OR              reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    NOT             reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    MOD             reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    LBRACKET        reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    RPAREN          reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    REDIRECT        reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    $end            reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    RBRACE          reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    COMMA           reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    RBRACKET        reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)
    COLON           reduce using rule 84 (anon_function_expr -> FUNCTION LPAREN RPAREN NEWLINE block .)


state 231

    (22) block -> LBRACE NEWLINE . stmt_list RBRACE
    (23) block -> LBRACE NEWLINE . RBRACE
    (4) stmt_list -> NEWLINE . stmt_list
    (1) stmt_list -> . stmt_redirect
    (2) stmt_list -> . stmt_redirect NEWLINE
    (3) stmt_list -> . stmt_redirect NEWLINE stmt_list
    (4) stmt_list -> . NEWLINE stmt_list
    (5) stmt_redirect -> . stmt
    (6) stmt_redirect -> . stmt REDIRECT ATOM
    (7) stmt_redirect -> . stmt REDIRECT STRING
    (8) stmt -> . if_stmt
    (9) stmt -> . for_stmt
    (10) stmt -> . while_stmt
    (11) stmt -> . assignment_stmt
    (12) stmt -> . function_definition_stmt
    (13) stmt -> . return_stmt
    (14) stmt -> . break_stmt
    (15) stmt -> . undef_stmt
    (16) stmt -> . const_stmt
    (17) stmt -> . command
    (18) stmt -> . call
    (19) stmt -> . expr_parens
    (20) stmt -> . shell
    (25) if_stmt -> . IF LPAREN expr RPAREN block
    (26) if_stmt -> . IF LPAREN expr RPAREN block ELSE block
    (27) for_stmt -> . FOR LPAREN ATOM IN expr RPAREN block
    (28) for_stmt -> . FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block
    (29) while_stmt -> . WHILE LPAREN expr RPAREN block
    (30) assignment_stmt -> . ATOM ASSIGN expr
    (31) assignment_stmt -> . subscript_left ASSIGN expr
    (33) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN block
    (34) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN block
    (35) function_definition_stmt -> . FUNCTION ATOM LPAREN RPAREN NEWLINE block
    (36) function_definition_stmt -> . FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block
    (39) return_stmt -> . RETURN
    (40) return_stmt -> . RETURN expr
    (41) break_stmt -> . BREAK
    (42) undef_stmt -> . UNDEF ATOM
    (32) const_stmt -> . CONST symbol ASSIGN expr
    (104) command -> . command_item
    (105) command -> . command_item parameter_list
    (106) command -> . command_item PIPE command
    (107) command -> . command_item parameter_list PIPE command
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN
    (139) shell -> . SHELL
    (140) shell -> . SHELL parameter_list
    (80) subscript_left -> . subscript_left LBRACKET expr RBRACKET
    (81) subscript_left -> . symbol LBRACKET expr RBRACKET
    (108) command_item -> . LIST
    (109) command_item -> . NUMBER
    (110) command_item -> . UP
    (111) command_item -> . symbol
    (112) command_item -> . COPEN expr RBRACE
    (113) command_item -> . STRING
    (77) symbol -> . ATOM

    RBRACE          shift and go to state 243
    NEWLINE         shift and go to state 1
    IF              shift and go to state 16
    FOR             shift and go to state 19
    WHILE           shift and go to state 32
    ATOM            shift and go to state 31
    FUNCTION        shift and go to state 15
    RETURN          shift and go to state 12
    BREAK           shift and go to state 35
    UNDEF           shift and go to state 30
    CONST           shift and go to state 34
    LPAREN          shift and go to state 3
    SHELL           shift and go to state 22
    LIST            shift and go to state 27
    NUMBER          shift and go to state 36
    UP              shift and go to state 24
    COPEN           shift and go to state 23
    STRING          shift and go to state 5

    return_stmt                    shift and go to state 2
    while_stmt                     shift and go to state 4
    call                           shift and go to state 6
    subscript_left                 shift and go to state 9
    stmt                           shift and go to state 26
    command                        shift and go to state 28
    shell                          shift and go to state 20
    stmt_list                      shift and go to state 244
    command_item                   shift and go to state 8
    if_stmt                        shift and go to state 25
    const_stmt                     shift and go to state 10
    symbol                         shift and go to state 33
    assignment_stmt                shift and go to state 13
    stmt_redirect                  shift and go to state 14
    function_definition_stmt       shift and go to state 11
    break_stmt                     shift and go to state 7
    for_stmt                       shift and go to state 18
    undef_stmt                     shift and go to state 29
    expr_parens                    shift and go to state 21

state 232

    (24) block -> LBRACE RBRACE .

    REDIRECT        reduce using rule 24 (block -> LBRACE RBRACE .)
    NEWLINE         reduce using rule 24 (block -> LBRACE RBRACE .)
    $end            reduce using rule 24 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 24 (block -> LBRACE RBRACE .)
    RPAREN          reduce using rule 24 (block -> LBRACE RBRACE .)
    EQ              reduce using rule 24 (block -> LBRACE RBRACE .)
    NE              reduce using rule 24 (block -> LBRACE RBRACE .)
    GT              reduce using rule 24 (block -> LBRACE RBRACE .)
    GE              reduce using rule 24 (block -> LBRACE RBRACE .)
    LT              reduce using rule 24 (block -> LBRACE RBRACE .)
    LE              reduce using rule 24 (block -> LBRACE RBRACE .)
    PLUS            reduce using rule 24 (block -> LBRACE RBRACE .)
    MINUS           reduce using rule 24 (block -> LBRACE RBRACE .)
    MUL             reduce using rule 24 (block -> LBRACE RBRACE .)
    DIV             reduce using rule 24 (block -> LBRACE RBRACE .)
    REGEX           reduce using rule 24 (block -> LBRACE RBRACE .)
    AND             reduce using rule 24 (block -> LBRACE RBRACE .)
    OR              reduce using rule 24 (block -> LBRACE RBRACE .)
    NOT             reduce using rule 24 (block -> LBRACE RBRACE .)
    MOD             reduce using rule 24 (block -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 24 (block -> LBRACE RBRACE .)
    COMMA           reduce using rule 24 (block -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 24 (block -> LBRACE RBRACE .)
    COLON           reduce using rule 24 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 24 (block -> LBRACE RBRACE .)


state 233

    (21) block -> LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 245


state 234

    (86) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 246

state 235

    (85) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .

    EQ              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    NE              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    GT              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    GE              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    LT              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    LE              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    PLUS            reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    MINUS           reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    MUL             reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    DIV             reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    REGEX           reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    AND             reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    OR              reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    NOT             reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    MOD             reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    LBRACKET        reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    RPAREN          reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    REDIRECT        reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    NEWLINE         reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    $end            reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    RBRACE          reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    COMMA           reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    RBRACKET        reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)
    COLON           reduce using rule 85 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN block .)


state 236

    (67) dict_pair -> NEWLINE expr COLON expr .
    (68) dict_pair -> NEWLINE expr COLON expr . NEWLINE
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    COMMA           reduce using rule 67 (dict_pair -> NEWLINE expr COLON expr .)
    RBRACE          reduce using rule 67 (dict_pair -> NEWLINE expr COLON expr .)
    NEWLINE         shift and go to state 247
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 237

    (35) function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .

    REDIRECT        reduce using rule 35 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 35 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)
    $end            reduce using rule 35 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)
    RBRACE          reduce using rule 35 (function_definition_stmt -> FUNCTION ATOM LPAREN RPAREN NEWLINE block .)


state 238

    (36) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 248

state 239

    (34) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .

    REDIRECT        reduce using rule 34 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)
    NEWLINE         reduce using rule 34 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)
    $end            reduce using rule 34 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)
    RBRACE          reduce using rule 34 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN block .)


state 240

    (26) if_stmt -> IF LPAREN expr RPAREN block ELSE . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 249

state 241

    (28) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN . expr RPAREN block
    (45) expr -> . symbol
    (46) expr -> . literal
    (47) expr -> . array_literal
    (48) expr -> . dict_literal
    (49) expr -> . unary_expr
    (50) expr -> . binary_expr
    (51) expr -> . call
    (52) expr -> . subscript_expr
    (53) expr -> . anon_function_expr
    (54) expr -> . expr_expansion
    (55) expr -> . expr_parens
    (56) expr -> . COPEN expr RBRACE
    (77) symbol -> . ATOM
    (69) literal -> . NUMBER
    (70) literal -> . HEXNUMBER
    (71) literal -> . BINNUMBER
    (72) literal -> . OCTNUMBER
    (73) literal -> . STRING
    (74) literal -> . TRUE
    (75) literal -> . FALSE
    (76) literal -> . NULL
    (59) array_literal -> . LBRACKET RBRACKET
    (60) array_literal -> . LBRACKET expr_list RBRACKET
    (61) dict_literal -> . LBRACE RBRACE
    (62) dict_literal -> . LBRACE NEWLINE RBRACE
    (63) dict_literal -> . LBRACE dict_pair_list RBRACE
    (87) unary_expr -> . MINUS expr
    (88) unary_expr -> . NOT expr
    (89) binary_expr -> . expr EQ expr
    (90) binary_expr -> . expr NE expr
    (91) binary_expr -> . expr GT expr
    (92) binary_expr -> . expr GE expr
    (93) binary_expr -> . expr LT expr
    (94) binary_expr -> . expr LE expr
    (95) binary_expr -> . expr PLUS expr
    (96) binary_expr -> . expr MINUS expr
    (97) binary_expr -> . expr MUL expr
    (98) binary_expr -> . expr DIV expr
    (99) binary_expr -> . expr REGEX expr
    (100) binary_expr -> . expr AND expr
    (101) binary_expr -> . expr OR expr
    (102) binary_expr -> . expr NOT expr
    (103) binary_expr -> . expr MOD expr
    (78) call -> . ATOM LPAREN RPAREN
    (79) call -> . ATOM LPAREN expr_list RPAREN
    (82) subscript_expr -> . expr LBRACKET expr RBRACKET
    (83) anon_function_expr -> . FUNCTION LPAREN RPAREN block
    (84) anon_function_expr -> . FUNCTION LPAREN RPAREN NEWLINE block
    (85) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN block
    (86) anon_function_expr -> . FUNCTION LPAREN function_argument_list RPAREN NEWLINE block
    (58) expr_expansion -> . EOPEN command RPAREN
    (57) expr_parens -> . LPAREN expr RPAREN

    COPEN           shift and go to state 52
    ATOM            shift and go to state 58
    NUMBER          shift and go to state 39
    HEXNUMBER       shift and go to state 42
    BINNUMBER       shift and go to state 50
    OCTNUMBER       shift and go to state 44
    STRING          shift and go to state 40
    TRUE            shift and go to state 56
    FALSE           shift and go to state 38
    NULL            shift and go to state 43
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 64
    MINUS           shift and go to state 63
    NOT             shift and go to state 65
    FUNCTION        shift and go to state 48
    EOPEN           shift and go to state 49
    LPAREN          shift and go to state 3

    expr_expansion                 shift and go to state 45
    expr                           shift and go to state 250
    dict_literal                   shift and go to state 53
    symbol                         shift and go to state 62
    subscript_expr                 shift and go to state 61
    array_literal                  shift and go to state 46
    anon_function_expr             shift and go to state 47
    unary_expr                     shift and go to state 57
    binary_expr                    shift and go to state 59
    call                           shift and go to state 41
    expr_parens                    shift and go to state 51
    literal                        shift and go to state 60

state 242

    (27) for_stmt -> FOR LPAREN ATOM IN expr RPAREN . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 251

state 243

    (23) block -> LBRACE NEWLINE RBRACE .

    REDIRECT        reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    NEWLINE         reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    $end            reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    RBRACE          reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    RPAREN          reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    EQ              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    NE              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    GT              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    GE              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    LT              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    LE              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    PLUS            reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    MINUS           reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    MUL             reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    DIV             reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    REGEX           reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    AND             reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    OR              reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    NOT             reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    MOD             reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    LBRACKET        reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    COMMA           reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    RBRACKET        reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    COLON           reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)
    ELSE            reduce using rule 23 (block -> LBRACE NEWLINE RBRACE .)


state 244

    (22) block -> LBRACE NEWLINE stmt_list . RBRACE
    (4) stmt_list -> NEWLINE stmt_list .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 252

  ! RBRACE          [ reduce using rule 4 (stmt_list -> NEWLINE stmt_list .) ]


state 245

    (21) block -> LBRACE stmt_list RBRACE .

    REDIRECT        reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    NEWLINE         reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    $end            reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    RPAREN          reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    EQ              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    NE              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    GT              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    GE              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    LT              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    LE              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    PLUS            reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    MINUS           reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    MUL             reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    DIV             reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    REGEX           reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    AND             reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    OR              reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    MOD             reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    LBRACKET        reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    COMMA           reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    RBRACKET        reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    COLON           reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)
    ELSE            reduce using rule 21 (block -> LBRACE stmt_list RBRACE .)


state 246

    (86) anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .

    EQ              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    NE              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    GT              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    GE              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    LT              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    LE              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    PLUS            reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    MINUS           reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    MUL             reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    DIV             reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    REGEX           reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    AND             reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    OR              reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    NOT             reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    MOD             reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    LBRACKET        reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    RPAREN          reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    REDIRECT        reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    $end            reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    RBRACE          reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    COMMA           reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    RBRACKET        reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)
    COLON           reduce using rule 86 (anon_function_expr -> FUNCTION LPAREN function_argument_list RPAREN NEWLINE block .)


state 247

    (68) dict_pair -> NEWLINE expr COLON expr NEWLINE .

    COMMA           reduce using rule 68 (dict_pair -> NEWLINE expr COLON expr NEWLINE .)
    RBRACE          reduce using rule 68 (dict_pair -> NEWLINE expr COLON expr NEWLINE .)


state 248

    (36) function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .

    REDIRECT        reduce using rule 36 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)
    NEWLINE         reduce using rule 36 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)
    $end            reduce using rule 36 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)
    RBRACE          reduce using rule 36 (function_definition_stmt -> FUNCTION ATOM LPAREN function_argument_list RPAREN NEWLINE block .)


state 249

    (26) if_stmt -> IF LPAREN expr RPAREN block ELSE block .

    REDIRECT        reduce using rule 26 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)
    NEWLINE         reduce using rule 26 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)
    RBRACE          reduce using rule 26 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)
    $end            reduce using rule 26 (if_stmt -> IF LPAREN expr RPAREN block ELSE block .)


state 250

    (28) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr . RPAREN block
    (89) binary_expr -> expr . EQ expr
    (90) binary_expr -> expr . NE expr
    (91) binary_expr -> expr . GT expr
    (92) binary_expr -> expr . GE expr
    (93) binary_expr -> expr . LT expr
    (94) binary_expr -> expr . LE expr
    (95) binary_expr -> expr . PLUS expr
    (96) binary_expr -> expr . MINUS expr
    (97) binary_expr -> expr . MUL expr
    (98) binary_expr -> expr . DIV expr
    (99) binary_expr -> expr . REGEX expr
    (100) binary_expr -> expr . AND expr
    (101) binary_expr -> expr . OR expr
    (102) binary_expr -> expr . NOT expr
    (103) binary_expr -> expr . MOD expr
    (82) subscript_expr -> expr . LBRACKET expr RBRACKET

    RPAREN          shift and go to state 253
    EQ              shift and go to state 115
    NE              shift and go to state 104
    GT              shift and go to state 103
    GE              shift and go to state 110
    LT              shift and go to state 117
    LE              shift and go to state 106
    PLUS            shift and go to state 114
    MINUS           shift and go to state 113
    MUL             shift and go to state 105
    DIV             shift and go to state 109
    REGEX           shift and go to state 107
    AND             shift and go to state 108
    OR              shift and go to state 111
    NOT             shift and go to state 116
    MOD             shift and go to state 112
    LBRACKET        shift and go to state 102


state 251

    (27) for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .

    REDIRECT        reduce using rule 27 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)
    NEWLINE         reduce using rule 27 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)
    $end            reduce using rule 27 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)
    RBRACE          reduce using rule 27 (for_stmt -> FOR LPAREN ATOM IN expr RPAREN block .)


state 252

    (22) block -> LBRACE NEWLINE stmt_list RBRACE .

    REDIRECT        reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    NEWLINE         reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    $end            reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    RBRACE          reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    RPAREN          reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    EQ              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    NE              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    GT              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    GE              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    LT              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    LE              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    PLUS            reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    MINUS           reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    MUL             reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    DIV             reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    REGEX           reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    AND             reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    OR              reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    NOT             reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    MOD             reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    LBRACKET        reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    COMMA           reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    RBRACKET        reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    COLON           reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)
    ELSE            reduce using rule 22 (block -> LBRACE NEWLINE stmt_list RBRACE .)


state 253

    (28) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN . block
    (21) block -> . LBRACE stmt_list RBRACE
    (22) block -> . LBRACE NEWLINE stmt_list RBRACE
    (23) block -> . LBRACE NEWLINE RBRACE
    (24) block -> . LBRACE RBRACE

    LBRACE          shift and go to state 214

    block                          shift and go to state 254

state 254

    (28) for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .

    REDIRECT        reduce using rule 28 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)
    NEWLINE         reduce using rule 28 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)
    $end            reduce using rule 28 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)
    RBRACE          reduce using rule 28 (for_stmt -> FOR LPAREN ATOM COMMA ATOM IN expr RPAREN block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 244 resolved as shift

#
# Top-level test runner.  Source this file to run all of the tests, behavior
# which can be optionally overridden by setting TEST_SET below to your own
# value.

TEST_SET = [ \
    "disk", "volume", "network", "service", "system", "account", "share", "boot", \
    "peering", "session", "task", "alert", "calendar", "tunable", "vm", "docker" \
]

# Cause the tests to exit upon any error.
if (not defined("_exit_on_error")) {
	_exit_on_error="no"
}

# Set _batch=yes external to this script if you don't want it to ask any
# questions and simply run all tests by default.
if (not defined("_batch")) {
	_batch="no"
}

# Where to run all of these scripts from.
const TOP_DIR = ${cli_src_path+"/examples/freenas-test/"}

# Set this to yes if you want to run the more stressy-tests
test_me_harder=false

# Where to log test result output to
output_file="output-log.txt"
output_handle = fopen(output_file, "w");
maybe_die(_success, "main#1", "Unable to open log file " + output_file + " for writing")

# Some constants which will be shared across tests, hence "global" - they do not have underscores prepended to their names to
# designate them as such.
const TEST_USER = "mytestuser"
const TEST_GROUP = "mytestgroup"
const VOL_NAME = "test_tank"
VOL_OBJECT = null
SNAP_OBJECT = null

source ${TOP_DIR + "common_funcs.cli"}

# Set some sensible default options before beginning the test run
setopt rollbar_enabled=no
#setopt verbosity=0

function load_all() {
	 for (test in TEST_SET) {
	 	_path=${TOP_DIR + test + ".cli"}
		print(">> Loading " + _path)
		source ${_path}
		if (_success != true) {
			print(_path + " test script not found")
			remove(TEST_SET, test)
		}
	}
}

# Run all of the create functions.
function create_all() {
	setopt abort_on_errors=yes
	for (test in TEST_SET) {
		eval(test + "_create()")
		if (test_me_harder == true) {
		   eval(test + "_hard_create()")
		}
	}
}

# Run all of the destroy (cleanup) functions.
function destroy_all() {
	setopt abort_on_errors=no
	for (test in TEST_SET) {
		eval(test + "_destroy()")
		if (test_me_harder == true) {
		   eval(test + "_hard_destroy()")
		}
	}
}

# OK do it.
load_all()

if (_batch == "yes") {
	x="yes"
} else {
	x = readline("All tests loaded. Ready to run them? ([y] / n) ")
}
if (x == "yes" or x == "y" or x == "") {
	if (_batch == "yes") {
		x="yes"
	} else {
		x = readline("Also run stress tests? (y or [n]) ")
	}
	test_me_harder = (x == "yes" or x == "y")
	printf(">>> Also logging results to " + output_file)
	create_all()
	destroy_all()
	fclose(output_handle)
} else {
	print("You can run the tests yourself by calling create_all()")
	print("(or testname_create()) then destroy_all() (or testname_destroy())")
}


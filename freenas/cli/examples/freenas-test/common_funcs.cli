# Common functions for all the tests

_sentinel_tag="_running_tests"

function maybe_barf(flag, test, str) {
	if (not flag) {
	    printf("ERROR %s in %s (\"%s\" : task #%d)\n", str, test, _error, _last_task_id)
	    fprintf(output_handle, "ERROR %s in %s (\"%s\" : task #%d)\n", str, test, _error, _last_task_id)
	    if (_exit_on_error == "yes") {
		exit 1
	    }
	}
	return not flag
}

function maybe_die(flag, test, str) {
	if (not flag) {
	    printf("FATAL error %s in %s (\"%s\" : task #%d)\n", str, test, _error, _last_task_id)
	    fprintf(output_handle, "FATAL error %s in %s (\"%s\" : task #%d)\n", str, test, _error, _last_task_id)
	    exit 2
	}
	return not flag
}	

function find_by_name(where, name) {
	_n = sprintf("/ %s show | search name ~= \"%s\"", where, name)
	_x = eval(_n)
	return _x[0]
}

function count_by_name(where, name) {
	_x = find_by_name(where, name)
	if (_x) {
		return length(_x)
	}
	return 0
}

function action_by_name(where, name, action) {
	_x = find_by_name(where, name)
	if (_x) {
	    for (_i in _x) {
		_n = sprintf("/ %s %s %s", where, _i["name"], action)
	    	eval(_n)
	    }
	}
}

# Functions to detect if tests are already running on a machine.
function test_sentinel() {
	return contains($(system get tags), _sentinel_tag)
}

function set_sentinel() {
	if (test_sentinel()) {
	   print("Warning: Sentinel tag " + _sentinel_tag + " was already set.")
	} else {
	   @$(system set tags =+ ${_sentinel_tag})
	   maybe_barf(_success, "set_sentinel", "Unable to set tag " + _sentinel_tag)
	}
}

function clear_sentinel() {
	if (not test_sentinel()) {
	   print("Warning: Sentinel tag " + _sentinel_tag + " not set.")
	} else {
	   @$(system set tags =- ${_sentinel_tag})
	   maybe_barf(_success, "clear_sentinel", "Unable to clear tag " + _sentinel_tag)
	}
}

# Just try to clean up everything a failed test (and failed destroy)
# might have left behind, as a last resort.
function nuke_from_orbit() {
	setopt abort_on_errors=no
	volume ${VOL_NAME} snapshot ${VOL_NAME + "@" + _snap_name} delete
	# This should take care of snapshots / datasets / VMs / containers too
	volume ${VOL_NAME} delete

	action_by_name("account user", TEST_USER + ".*", "delete")
	action_by_name("account group", TEST_USER + ".*", "delete")
	action_by_name("account group", TEST_GROUP + ".*", "delete")
	action_by_name("calendar command", _command_name + ".*", "delete")
	action_by_name("calendar scrub", _scrub_name + ".*", "delete")
	action_by_name("boot environment", _test_bootenv + ".*", "delete")
	action_by_name("tunable", _tunable_var_rc + ".*", "delete")
	action_by_name("network host", _test_host + ".*", "delete")
	action_by_name("vm", _vm_name + ".*", "delete")
	action_by_name("docker container", _container_name + ".*", "delete")
	action_by_name("vm", _container_vm_name, "delete")
	clear_sentinel()
}


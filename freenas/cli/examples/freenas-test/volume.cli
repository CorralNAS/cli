# Test runner for volume  category
#

# State variables shared between create and destroy functions.
_snap_name="_snappysnap"
_dataset_name="_testdset"

function volume_create() {
	print(">>> Starting volume tests")

	VOL_OBJECT = @$(volume create name=${VOL_NAME} disks=auto layout=auto)
	maybe_barf(_success, "+volume#1", "Unable to create volume " + VOL_NAME)
	@$(VOL_OBJECT scrub)
	maybe_barf(_success, "+volume#2", "Scrub of volume " + VOL_NAME + " failed")
	@$(VOL_OBJECT upgrade)
	maybe_barf(_success, "+volume#3", "Upgrade of volume " + VOL_NAME + " failed")
	_x=$(VOL_OBJECT get size)
	maybe_barf(_success, "+volume#4", "Unable to get size for volume " + VOL_NAME)
	maybe_barf(_x > 0, "+volume#5", "Insane size reported for " + VOL_NAME)

	@$(VOL_OBJECT dataset create name=${VOL_NAME + "/" + _dataset_name})
	maybe_barf(_success, "+volume#6", "Unable to create dataset " + _dataset_name)

	SNAP_OBJECT=@$(VOL_OBJECT snapshot create dataset=${VOL_NAME} recursive=yes name=${VOL_NAME + "@" + _snap_name})
	maybe_barf(_success, "+volume#7", "Unable to create snapshot for volume " + VOL_NAME + " named " + _snap_name)
	_x = $(VOL_OBJECT snapshot show | find name==${VOL_NAME + "@" + _snap_name})
	maybe_barf(_success, "+volume#8", "Unable to find created snapshot for volume " + VOL_NAME + " named " + _snap_name)
	maybe_barf(_x == $(SNAP_OBJECT get name), "+volume9", "Snapshot names do not agree: " + _x + " and " + $(SNAP_OBJECT get name))

	_x = $(VOL_OBJECT get guid)
	maybe_barf(_success, "+volume10", "Unable to get guid for volume " + VOL_NAME)
	if (test_me_harder) {
		volume_test_hard()
	}
}

function volume_destroy() {
	print(">>> Finishing volume tests")
	if (SNAP_OBJECT != null) {
		@$(SNAP_OBJECT delete)
	} else {
		@$(volume ${VOL_NAME} snapshot ${VOL_NAME + "@" + _snap_name} delete)
	}	
	maybe_barf(_success, "-volume#1", "Unable to delete snapshot " + _snap_name + " from volume " + VOL_NAME)
	@$(volume ${VOL_NAME} dataset ${VOL_NAME + "/" + _dataset_name} delete)
	maybe_barf(_success, "-volume#2", "Unable to delete dataset " + _dataset_name)
	if (VOL_OBJECT != null) {
		@$(VOL_OBJECT delete)
	} else {
		@$(volume ${VOL_NAME} delete)
	}
	maybe_barf(_success, "-volume#3", "Unable to delete volume " + VOL_NAME)
}

function volume_test_hard()
{
	_hard_count=20
	_dset_array = []
	_snap_array = []

	print(">>> Starting volume stress tests: " + str(_hard_count) + " datasets and snapshots")
	for (i = 0; i < _hard_count; i = i + 1) {
	    _x = @$(VOL_OBJECT dataset create name=${VOL_NAME + "/" + _dataset_name + str(i)})
	    if (not (maybe_barf(_success, "+volume-hard#1", "Unable to create dataset #" + str(i)))) {
	    	append(_dset_array, _x)
	    }
	}
	for (i = 0; i < _hard_count; i = i + 1) {
	    _x = @$(VOL_OBJECT snapshot create dataset=${VOL_NAME} recursive=yes name=${VOL_NAME + "@" + _snap_name + str(i)})
	    if (not (maybe_barf(_success, "+volume-hard#2", "Unable to create snapshot #" + str(i)))) {
	    	append(_snap_array, _x)
	    }
	}
	for (i in _dset_array) {
	    @$(${i} delete)
	    maybe_barf(_success, "+volume-hard#3", "Unable to delete dataset " + $(i name))
	}
	for (i in _snap_array) {
	    @$(${i} delete)
	    maybe_barf(_success, "+account-hard#4", "Unable to delete snapshot #" + str(i))
	}
}

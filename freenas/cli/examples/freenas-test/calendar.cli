# Test runner for calendar  category
#

# State variables shared between create and destroy functions.
_cmd_name="test-command"
_scrub_name="test-scrub"
_cal_command = none
_cal_scrub = none

function calendar_create() {
	print(">>> Starting calendar tests")
	_x = $(calendar check_update show|select name)
	maybe_barf(_success, "+calendar#1", "Unable to find check_update calendar entry")
	maybe_barf(_x[0]["result"] == "nightly_update_check", "+calendar#2", "nightly update check calendar entry naming syntax")
	_cal_command = @$(calendar command create command="echo testing" name=${_cmd_name} username=root schedule={"minute" : "*/10"})
	maybe_barf(_success, "+calendar#3", "unable to create calendar command task")
	_cal_scrub = @$(calendar scrub create name=${_scrub_name} volume=${VOL_NAME} enabled=yes schedule={"minute" : "*/30"})
	maybe_barf(_success, "+calendar#4", "unable to create calendar scrub task")
	_cal_scrub run
	maybe_barf(_success, "+calendar#5", "unable to run calendar scrub task")
	if (test_me_harder) {
	   calendar_test_hard()
	}
}

function calendar_destroy() {
	print(">>> Finishing calendar tests")
	if (_cal_command != null) {
		_cal_command delete
	} else {
		@$(calendar command ${_cmd_name} delete)
	}
	maybe_barf(_success, "-calendar#1", "unable to delete calendar command task")
	if (_cal_scrub != null) {
		_cal_scrub delete
	} else {
		@$(calendar scrub ${_scrub_name} delete)
	}
	maybe_barf(_success, "-calendar#2", "unable to delete calendar scrub task")
}

function calendar_test_hard() {
	_hard_count = 50
	_cal_array = []
	
	for (i = 0; i < _hard_count; i = i + 1) {
	    _x = @$(calendar command create command="echo testing" name=${_cmd_name + str(i)} username=TEST_USER schedule={"minute" : ${"*/" + str(i + 1)}})
	    if (not (maybe_barf(_success, "+calendar-hard#1", "Unable to create user " + i))) {
	       append(_cal_array, _x);
            }
	}

	for (i in _cal_array) {
	    _n = $(i get name)
	    $(i delete)
	    maybe_barf(_success, "+calendar-hard#2", "Unable to delete calendar entry " + _n)
	}
}
